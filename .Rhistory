N <- 99
Nsim <- 1000
ls <- list()
ls$n <- n_ls
ls$phi <- phi_ls
ls$mu_ls <- mu_ls
ls$stdev_ls <- stdev_ls
ls$P22_ls <-P22_ls
combined_list <- expand.grid(ls)
combined_list["mu_1"] = 0
combined_list["stdev_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["stdev_ls"]==1) + (combined_list["stdev_1"]==1))!=4,]
row.names(combined_list) <- NULL
# ---------------------------------------
# Power of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1 <- 2
k0 <- 1
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k2 <- list()
ar_mdl_k2[["ar"]] <- ar
ar_mdl_k2[["k"]] <- k1
i = 23
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
p22 <- combined_list[i,5]
# ------------- Model
ar_mdl_k2[["n"]] <- n
ar_mdl_k2[["phi"]] <- phi
ar_mdl_k2[["mu"]] <- c(mu_1,mu_2)
ar_mdl_k2[["stdev"]] <- c(stdev_1,stdev_2)
ar_mdl_k2[["P"]] <- cbind(c(0.9,0.10),c(1-p22,p22))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
N <- 99
N_MMC <- 20
lmc_power_count <- 0
mmc_power_count <- 0
test_reps <- 10
opt <-list()
opt$MMC_N <- N_MMC
opt$max_finite_tries <- 30
opt$max_CS_ar_tries <- 100
opt$max_CS_P_tries <- 100
st <- proc.time()
LRTest_LMC <- LR_MCTest(y_out$y, 1, k0=1, k1=2, TRUE, TRUE,  N=99, maxit = 200, thtol = 1e-6)
endlmc <- proc.time()-st
endlmc
LRTest_LMC$pval
LRTest_LMC$pval
LRTest_LMC$LRT_0
y_out <- simuMSAR(ar_mdl_k2, type="markov")
st <- proc.time()
LRTest_LMC <- LR_MCTest(y_out$y, 1, k0=1, k1=2, TRUE, TRUE,  N=99, maxit = 200, thtol = 1e-6)
endlmc <- proc.time()-st
endlmc
LRTest_LMC$pval
LRTest_LMC$LRT_0
y_out <- simuMSAR(ar_mdl_k2, type="markov")
st <- proc.time()
LRTest_LMC <- LR_MCTest(y_out$y, 1, k0=1, k1=2, TRUE, TRUE,  N=99, maxit = 200, thtol = 1e-6)
endlmc <- proc.time()-st
endlmc
LRTest_LMC$pval
LRTest_LMC$LRT_0
theta_low = theta_try - 0.005
theta_upp = theta_try + 0.005
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=3),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 300, lambda=10)
theta_try <- c(mdl_h0$theta,mdl_h1$theta)
theta_low = theta_try - 0.005
theta_upp = theta_try + 0.005
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=3),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 300, lambda=10)
end<- proc.time() -st
end
out$par
theta_try
out$convergence
mdl_h0$theta
mdl_h1$theta
mdl$k
mdl_h1$k
LRTest_LMC$mdl_h1$k
mdl_h0 <- LRTest_LMC$mdl_h0
mdl_h1 <- LRTest_LMC$mdl_h1
msmu = mdl_h1$msmu
msvar = mdl_h1$msvar
theta_try <- c(mdl_h0$theta,mdl_h1$theta)
theta_try
out$value
out$counts
out$message
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=10),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 300, lambda=10)
end<- proc.time() -st
theta_try
theta_low = theta_try - 0.005
theta_upp = theta_try + 0.005
out$convergence
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=10),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 300, lambda=10)
end<- proc.time() -st
out$convergence
out$value
out$message
out$par
out$par-theta_try
out$counts
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 300, lambda=10)
end<- proc.time() -st
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 200, lambda=10)
end<- proc.time() -st
out$convergence
out$par-theta_try
end
out$value
out$message
out$counts
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 200, lambda=10)
end<- proc.time() -st
end
out$convergence
out$par-theta_try
out$value
out$message
out$counts
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=1000, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 19, maxit = 200, lambda=10)
end<- proc.time() -st
st <- proc.time()
out <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=200, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=10)
end<- proc.time() -st
end
end[3]/60
(end[3]/60)/60
out$convergence
out$value
out$message
out$counts
out$par-theta_try
st <- proc.time()
out2 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=10)
end<- proc.time() -st
st <- proc.time()
out2 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=200, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=10)
end<- proc.time() -st
st <- proc.time()
out2 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=20, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=100)
end<- proc.time() -st
st <- proc.time()
out2 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=20, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=10000)
end<- proc.time() -st
st <- proc.time()
out2 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=10000)
end<- proc.time() -st
st <- proc.time()
out2 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=10000)
end<- proc.time() -st
(end/60)/60
(end[3]/60)/60
out2$convergence
out2$value
out2$counts
st <- proc.time()
out3 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=20, trace.stats = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() -st
(end[3]/60)/60
st <- proc.time()
out3 <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=20, trace = 1, trace.stats = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() -st
(end[3]/60)/60
out3$stats
out3$stats$f
out3$stats$error
out3$stats$it
out2$par-theta_try
outls <- list()
outls[[1]] <- out2
outls[[1]]
outls
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace =1),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() - st
(end[3]/60)/60
checktime[xt] <- end[3]
}
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() - st
(end[3]/60)/60
checktime[xt] <- end[3]
}
checktime
print(paste0(xt, (end[3]/60)/60))
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:' (end[3]/60)/60))
checktime[xt] <- end[3]
}
print(paste0('iter: ',xt,', time for completion:' (end[3]/60)/60))
print(paste0('iter: ',xt,', time for completion:' (end[3]/60)/60))
end
end[3]
(end[3]/60)
print(paste0('iter: ',xt,', time for completion:', (end[3]/60)/60))
outls[[1]]$stats
outls[[1]]$stats$f
outls[[1]]$counts
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE, vectorize = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:', (end[3]/60)/60))
checktime[xt] <- end[3]
}
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE, vectorize = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:', end[3]))
checktime[xt] <- end[3]
}
out2$convergence
outls[[1]]$convergence
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE, vectorize = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=1000)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:', end[3]))
checktime[xt] <- end[3]
}
outls[[1]]$value
outls[[1]]$counts
outls[[1]]$stats$f
epsilon <- 0.005
theta_low = theta_try - epsilon
theta_upp = theta_try + epsilon
theta_low[2]
theta_low
theta_low[2][theta_low[2]<0]
theta_low[2]<0
theta_low[2][theta_low[2]<0] = 0.0001
theta_low
theta_low[7][theta_low[7]<0] = 0.0001
theta_low[9:12]
theta_low[9:12][theta_low[9:12]<0}
theta_low[9:12][theta_low[9:12]<0]
theta_low[9:12][theta_low[9:12]<0] = 0
theta_low
epsilon <- 0.1
theta_low = theta_try - epsilon
theta_upp = theta_try + epsilon
theta_low
theta_upp
theta_low[2][theta_low[2]<0] = 0.0001
theta_low[6][theta_low[6]<0] = 0.0001
theta_low[7][theta_low[7]<0] = 0.0001
theta_low
theta_low[9:12][theta_low[9:12]<0] = 0
theta_upp[9:12][theta_upp[9:12]>1] = 1
theta_low
theta_upp[9:12][theta_upp[9:12]>1] = 1
theta_upp
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
try(
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE, vectorize = TRUE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=100)
)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:', end[3]))
checktime[xt] <- end[3]
}
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
try(
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE, vectorize = FALSE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=100)
)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:', end[3]))
checktime[xt] <- end[3]
}
theta_upp
theta_upp[3][theta_upp[3]>1] = 0.9999
theta_upp[8][theta_upp[8]>1] = 0.9999
theta_upp
theta_low
theta_low[2][theta_low[2]<0] = 0.0001
theta_low[3][theta_low[3]<-1] = -0.9999
theta_low[6][theta_low[6]<0] = 0.0001
theta_low[7][theta_low[7]<0] = 0.0001
theta_low[8][theta_low[8]<-1] = -0.9999
theta_low[9:12][theta_low[9:12]<0] = 0
theta_upp[9:12][theta_upp[9:12]>1] = 1
theta_upp[3][theta_upp[3]>1] = 0.9999
theta_upp[8][theta_upp[8]>1] = 0.9999
outls <- list()
Ntime <-5
checktime <- matrix(0,Ntime,1)
for (xt in 1:Ntime){
st <- proc.time()
try(
outls[[xt]] <- pso::psoptim(par = theta_try, fn = MMCpval_fun, lower = theta_low, upper = theta_upp, gr = NULL,
control = list(maxit=100, trace = 1, trace.stats = TRUE, vectorize = FALSE),
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, msmu = msmu, msvar = msvar,
ar = 1, N = 99, maxit = 200, lambda=100)
)
end<- proc.time() - st
print(paste0('iter: ',xt,', time for completion:', end[3]))
checktime[xt] <- end[3]
}
library(MSTest)
library(MSTest)
# TRYING MMC TEST
ar <- 1
n_ls <-  c(100,200,500)
mu_ls <- c(0,2)
stdev_ls <- c(1,2)
phi_ls <- c(0.1, 0.9, 1)
P22_ls <- c(0.90, 0.50)
N <- 99
Nsim <- 1000
ls <- list()
ls$n <- n_ls
ls$phi <- phi_ls
ls$mu_ls <- mu_ls
ls$stdev_ls <- stdev_ls
ls$P22_ls <-P22_ls
combined_list <- expand.grid(ls)
combined_list["mu_1"] = 0
combined_list["stdev_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["stdev_ls"]==1) + (combined_list["stdev_1"]==1))!=4,]
row.names(combined_list) <- NULL
# ---------------------------------------
# Power of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1 <- 2
k0 <- 1
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k2 <- list()
ar_mdl_k2[["ar"]] <- ar
ar_mdl_k2[["k"]] <- k1
i = 23
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
p22 <- combined_list[i,5]
# ------------- Model
ar_mdl_k2[["n"]] <- n
ar_mdl_k2[["phi"]] <- phi
ar_mdl_k2[["mu"]] <- c(mu_1,mu_2)
ar_mdl_k2[["stdev"]] <- c(stdev_1,stdev_2)
ar_mdl_k2[["P"]] <- cbind(c(0.9,0.10),c(1-p22,p22))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
tt<-10
check_spped <- matrix(0,tt,3)
for (xt in 1:tt){
y_out <- simuMSAR(ar_mdl_k2, type="markov")
set.seed(12345)
st <- proc.time()
LRTest_LMC <- LR_MCTest(y_out$y, 1, k0=1, k1=2, TRUE, TRUE,  N=99, maxit = 200, thtol = 1e-6)
endlmc <- proc.time()-st
set.seed(12345)
st_r <- proc.time()
LRTest_LMC_R <- LR_MCTest_R(y_out$y, 1, k0=1, k1=2, msmu= TRUE, msvar=TRUE,  control = list(N=99, maxit = 200, thtol = 1e-6))
endlmc_r <- proc.time()-st_r
check_spped[xt,1] <- endlmc_r[3]
check_spped[xt,2] <- endlmc[3]
check_spped[xt,3] <- (endlmc_r[3] - endlmc[3])
}
check_spped
check_spped[,3]
mean(check_spped[,3])
tt<-100
check_spped <- matrix(0,tt,3)
for (xt in 1:tt){
y_out <- simuMSAR(ar_mdl_k2, type="markov")
set.seed(12345)
st <- proc.time()
LRTest_LMC <- LR_MCTest(y_out$y, 1, k0=1, k1=2, TRUE, TRUE,  N=99, maxit = 200, thtol = 1e-6)
endlmc <- proc.time()-st
set.seed(12345)
st_r <- proc.time()
LRTest_LMC_R <- LR_MCTest_R(y_out$y, 1, k0=1, k1=2, msmu= TRUE, msvar=TRUE,  control = list(N=99, maxit = 200, thtol = 1e-6))
endlmc_r <- proc.time()-st_r
check_spped[xt,1] <- endlmc_r[3]
check_spped[xt,2] <- endlmc[3]
check_spped[xt,3] <- (endlmc_r[3] - endlmc[3])
}
check_spped[,3]
mean(check_spped[,3])
sum(check_spped[,3])
sum(check_spped[,3])*10
max(check_spped[,3])
min(check_spped[,3])
