# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
x <- y_hmm_simu
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St)
graphics::matplot(1:x$n, x$St, type = "l")
x$St
graphics::par(mfrow=c(2,1))
if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated processes",
xlab ="Time", main = "Time series of simulated processes")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}
graphics::par(mfrow=c(1,1))
graphics::par(mfrow=c(2,1))
if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated processes",
xlab ="Time", main = "Time series of simulated processes")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}
x$q
graphics::par(mfrow=c(2,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated processes",
xlab ="Time", main = "Time series of simulated processes")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}
graphics::par(mfrow=c(2,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "simulated processes",
xlab ="Time", main = "Time series of simulated processes")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "state",
xlab ="Time",)
}
graphics::par(mfrow=c(1,1))
mdl_hmm <- list(n     = 1000,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
set.seed(1234)
# Define DGP of MS AR process
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5, 0.2),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
x<-y_ms_simu
graphics::par(mfrow=c(2,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "State (St)",
xlab ="Time",)
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Simulated processes",
xlab ="Time", main = "Time series of simulated processes")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "State (St)",
xlab ="Time",)
}
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "State (St)",
graphics::par(mfrow=c(1,1))
graphics::par(mfrow=c(2,1))
graphics::par(mfrow=c(2,1))
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "State (St)", xlab ="Time",)
graphics::par(mfrow=c(1,1))
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Simulated process",
xlab ="Time", main = "Time series of simulated process")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "State (St)", xlab ="Time",)
graphics::par(mfrow=c(1,1))
set.seed(1234)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 1000,
p     = 1,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
x <- y_msvar_simu
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Simulated processes",
xlab ="Time", main = "Time series of simulated processes")
graphics::matplot(1:x$n, x$St+1, type = "l", ylab = "State (St)", xlab ="Time",)
graphics::par(mfrow=c(1,1))
plot(x$y)
devtools::document()
library(MSTest)
set.seed(1234)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 1000,
p     = 1,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
plot(y_msvar_simu)
set.seed(1234)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 1000,
p     = 1,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
plot(y_msvar_simu)
set.seed(1234)
# Define DGP of MS AR process
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5, 0.2),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
plot(y_ms_simu)
set.seed(1234)
# ----- Univariate ----- #
# Define DGP
mdl_hmm <- list(n     = 1000,
q     = 1,
mu    = as.matrix(c(5,
-2)),
sigma = list(as.matrix(5.0),
as.matrix(7.0)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
plot(y_hmm_simu)
# ----- Multivariate ----- #
# Define DGP
mdl_hmm <- list(n     = 1000,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
plot(y_hmm_simu)
set.seed(1234)
# Define DGP of VAR process
mdl_3var2 <- list(n     = 1000,
p     = 2,
q     = 3,
mu    = c(5, -2, 1),
sigma = rbind(c(5.0, 1.5, 2.5),
c(1.5, 1.0, 1.5),
c(2.5, 1.5, 4.2)),
phi   = rbind(c(0.70, 0.30, 0.35,  -0.50, -0.20,   0.25),
c(0.20, 0.40, 0.35,  -0.30,  0.30,   0.25),
c(0.20, 0.30, 0.50,  -0.30, -0.20,  -0.40)))
# Simulate process using simuVAR() function
y3var2_simu <- simuVAR(mdl_3var2)
plot(y3var2_simu)
set.seed(1234)
# Define DGP of AR process
mdl_ar <- list(n     = 500,
mu    = 5,
sigma = 2,
phi   = c(0.5,0.2))
# Simulate process using simuAR() function
y_simu <- simuAR(mdl_ar)
plot(y_simu)
set.seed(1234)
# Define DGP
mdl_norm <- list(n     = 1000,
q     = 2,
mu    = c(5, -2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)))
# Simulate process using simuNorm() function
y_norm_simu <- simuNorm(mdl_norm)
plot(y_norm_simu)
devtools::document()
library(MSTest)
set.seed(1234)
# ----- Univariate ----- #
# Define DGP
mdl_norm <- list(n     = 1000,
q     = 1,
mu    = as.matrix(5),
sigma = as.matrix(5.0))
# Simulate process using simuNorm() function
y_norm_simu <- simuNorm(mdl_norm)
# estimate parameters
y_norm_mdl <- Nmdl(y_norm_simu$y)
y_norm_mdl
x <- y_norm_mdl
(x$q==1)
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
# Define DGP
mdl_norm <- list(n     = 1000,
q     = 2,
mu    = c(5, -2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)))
# Simulate process using simuNorm() function
y_norm_simu <- simuNorm(mdl_norm)
# estimate parameters
y_norm_mdl <- Nmdl(y_norm_simu$y)
y_norm_mdl
x$x <- y_norm_mdl
graphics::par(mfrow=c(2,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
}
x <- y_norm_mdl
graphics::par(mfrow=c(2,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
}
set.seed(1234)
# Define DGP of AR process
mdl_ar <- list(n     = 500,
mu    = 5,
sigma = 2,
phi   = c(0.5,0.2))
# Simulate process using simuAR() function
y_simu <- simuAR(mdl_ar)
# Set options for model estimation
control <- list(const  = TRUE,
getSE  = TRUE)
# Estimate model
y_ar_mdl <- ARmdl(y_simu$y, p = 2, control)
y_ar_mdl
x <- y_ar_mdl
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
graphics::par(mfrow=c(1,1))
# ----- Bivariate VAR(1) process ----- #
set.seed(1234)
# Define DGP of VAR process
mdl_var <- list(n     = 1000,
p     = 1,
q     = 2,
mu    = c(5,-2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)))
# Simulate process using simuVAR() function
y_simu <- simuVAR(mdl_var)
# Set options for model estimation
control <- list(const  = TRUE,
getSE  = TRUE)
# Estimate model
y_var_mdl <- VARmdl(y_simu$y, p = 2, control)
y_var_mdl
x <- y_var_mdl
graphics::par(mfrow=c(2,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
graphics::par(mfrow=c(1,1))
set.seed(1234)
# ----- Univariate ----- #
# Define DGP
mdl_hmm <- list(n     = 1000,
q     = 1,
mu    = as.matrix(c(5,-2)),
sigma = list(as.matrix(5.0),
as.matrix(7.0)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 1)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
x <- y_hmm_mdl
graphics::par(mfrow=c(2,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values",
xlab ="Time")
}
graphics::par(mfrow=c(3,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values", xlab ="Time")
graphics::matplot(1:x$n, x$St, type = "l", ylab = "State (St)", xlab ="Time")
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values", xlab ="Time")
graphics::matplot(1:x$n, x$St, type = "l", ylab = "State (St)", xlab ="Time")
}
graphics::par(mfrow=c(1,1))
# Define DGP
mdl_hmm <- list(n     = 500,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 1)
# Estimate model
\dontrun{
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
x <- y_hmm_mdl
graphics::par(mfrow=c(3,1))
if (x$q==1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values", xlab ="Time")
graphics::matplot(1:x$n, x$St, type = "l", ylab = "State (St)", xlab ="Time")
}else if (x$q>1){
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values", xlab ="Time")
graphics::matplot(1:x$n, x$St, type = "l", ylab = "State (St)", xlab ="Time")
}
graphics::par(mfrow=c(1,1))
# --------------------------- Use simulated process ----------------------------
set.seed(1234)
# Define DGP of MS AR process
mdl_ms2 <- list(n     = 200,
mu    = c(5,10),
sigma = c(1,4),
phi   = c(0.5),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 1)
ms_mdl <- MSARmdl(y_ms_simu$y, p = 1, k = 2, control)
ms_mdl
x <- ms_mdl
graphics::par(mfrow=c(3,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed process",
xlab ="Time", main = "Time series of process & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values", xlab ="Time")
graphics::matplot(1:x$n, x$St, type = "l", ylab = "State (St)", xlab ="Time")
graphics::par(mfrow=c(1,1))
set.seed(123)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 200,
p     = 1,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 1)
# Estimate model
\dontrun{
y_msvar_mdl <- MSVARmdl(y_msvar_simu$y, p = 2, k = 2, control)
y_msvar_mdl
x <- y_msvar_mdl
graphics::par(mfrow=c(3,1))
graphics::matplot(1:x$n, x$y, type = "l", ylab = "Observed processes",
xlab ="Time", main = "Time series of processes & fitted values")
graphics::matplot(1:x$n, x$fitted, type = "l", ylab = "Fitted values", xlab ="Time")
graphics::matplot(1:x$n, x$St, type = "l", ylab = "State (St)", xlab ="Time")
graphics::par(mfrow=c(1,1))
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
