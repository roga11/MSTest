)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
i
i=1
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
var_mdl_k1[["n"]] <- n
var_mdl_k1[["phi"]] <- matrix(c(c(phi,-0.25),c(0.25,phi)),2,2)
# ------------- File name and columns titles
file_name <-paste0('MSVAR_MMC_LRT_simulation_',N,'_results_eps_',ifelse(control$eps<0.001,"CI",sub('\\.','',round(control$eps,3))),'_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","MMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
MMCLRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(MMCLRTest_out)){
y_out <- simuVAR(var_mdl_k1)
attempt <- attempt + 1
try(
MMCLRTest_out <- MMCLRTest(y_out$y, ar, k0, k1, control = control)
)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
library(MSTest)
getwd()
setwd("/Users/grodriguezrondon/Documents/Res/structbreak/MSTest_rpack_v2/MSTest")
library(MSTest)
MSVARmdl_EM
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
var_mdl_k1[["n"]] <- n
var_mdl_k1[["phi"]] <- matrix(c(c(phi,-0.25),c(0.25,phi)),2,2)
# ------------- File name and columns titles
file_name <-paste0('MSVAR_MMC_LRT_simulation_',N,'_results_eps_',ifelse(control$eps<0.001,"CI",sub('\\.','',round(control$eps,3))),'_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","MMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
MMCLRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(MMCLRTest_out)){
y_out <- simuVAR(var_mdl_k1)
attempt <- attempt + 1
try(
MMCLRTest_out <- MMCLRTest(y_out$y, ar, k0, k1, control = control)
)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
library(MSTest)
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
var_mdl_k1[["n"]] <- n
var_mdl_k1[["phi"]] <- matrix(c(c(phi,-0.25),c(0.25,phi)),2,2)
# ------------- File name and columns titles
file_name <-paste0('MSVAR_MMC_LRT_simulation_',N,'_results_eps_',ifelse(control$eps<0.001,"CI",sub('\\.','',round(control$eps,3))),'_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","MMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
MMCLRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(MMCLRTest_out)){
y_out <- simuVAR(var_mdl_k1)
attempt <- attempt + 1
try(
MMCLRTest_out <- MMCLRTest(y_out$y, ar, k0, k1, control = control)
)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
xi
MMCLRTest_out
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files")
#setwd("/Users/grodriguezrondon/Desktop")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test_res_new")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
N <- 99
Nsim <- 1000
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
getSE = TRUE,
eps = 0.05,
CI_union = TRUE,
lambda = 100,
variance_lower_bound = 0.1,
stationary_ind = TRUE, #unless phi=1 (see below)
type = "pso", # pso recommended over GenSA as GenSA takes significantly longer to search/converge. If simply testing, this may not be as important but in empirical size and power calculations this slowdown is significant.
silence = FALSE,
threshold_stop = 0.05000001, # optimization will stop if test fails to reject (i.e. search until we fail to reject, not highest pval)
converge_check = "none",
type_control = list(maxit = 200))
# ====================================================================
# ====== Params
# ====================================================================
mu <- c(0,0)
sigma <- matrix(c(c(1,0.5),c(0.5,1)),2,2)
ar <- 1
n_ls <- c(100,200,500)
phi_ls <- c(0.1, 0.9)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- 2
k0_ls <- 1
control[["msmu"]] <- TRUE
control[["msvar"]] <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
var_mdl_k1 <- list()
var_mdl_k1[["mu"]] <- mu
var_mdl_k1[["sigma"]] <- sigma
var_mdl_k1[["ar"]] <- ar
var_mdl_k1[["k"]] <- 1
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
i=1
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
var_mdl_k1[["n"]] <- n
var_mdl_k1[["phi"]] <- matrix(c(c(phi,-0.25),c(0.25,phi)),2,2)
# ------------- File name and columns titles
file_name <-paste0('MSVAR_MMC_LRT_simulation_',N,'_results_eps_',ifelse(control$eps<0.001,"CI",sub('\\.','',round(control$eps,3))),'_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","MMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
xi=3
MMCLRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(MMCLRTest_out)){
y_out <- simuVAR(var_mdl_k1)
attempt <- attempt + 1
try(
MMCLRTest_out <- MMCLRTest(y_out$y, ar, k0, k1, control = control)
)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
MMCLRTest_out$pval
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
res_line
write(res_line, file = file_name, append = TRUE)
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files")
#setwd("/Users/grodriguezrondon/Desktop")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test_res_new")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
N <- 99
Nsim <- 1000
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
getSE = TRUE,
eps = 0.05,
CI_union = TRUE,
lambda = 100,
variance_lower_bound = 0.1,
stationary_ind = TRUE, #unless phi=1 (see below)
type = "pso", # pso recommended over GenSA as GenSA takes significantly longer to search/converge. If simply testing, this may not be as important but in empirical size and power calculations this slowdown is significant.
silence = FALSE,
threshold_stop = 0.05000001, # optimization will stop if test fails to reject (i.e. search until we fail to reject, not highest pval)
converge_check = "none",
type_control = list(maxit = 200))
# ====================================================================
# ====== Params
# ====================================================================
mu <- c(0,0)
sigma <- matrix(c(c(1,0.5),c(0.5,1)),2,2)
ar <- 1
n_ls <- c(100,200,500)
phi_ls <- c(0.1, 0.9)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- 2
k0_ls <- 1
control[["msmu"]] <- TRUE
control[["msvar"]] <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
var_mdl_k1 <- list()
var_mdl_k1[["mu"]] <- mu
var_mdl_k1[["sigma"]] <- sigma
var_mdl_k1[["ar"]] <- ar
var_mdl_k1[["k"]] <- 1
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
i=1
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
var_mdl_k1[["n"]] <- n
var_mdl_k1[["phi"]] <- matrix(c(c(phi,-0.25),c(0.25,phi)),2,2)
# ------------- File name and columns titles
file_name <-paste0('MSVAR_MMC_LRT_simulation_',N,'_results_eps_',ifelse(control$eps<0.001,"CI",sub('\\.','',round(control$eps,3))),'_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","MMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
MMCLRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(MMCLRTest_out)){
y_out <- simuVAR(var_mdl_k1)
attempt <- attempt + 1
try(
MMCLRTest_out <- MMCLRTest(y_out$y, ar, k0, k1, control = control)
)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files")
#setwd("/Users/grodriguezrondon/Desktop")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test_res_new")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
N <- 99
Nsim <- 1000
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
getSE = TRUE,
eps = 0.05,
CI_union = TRUE,
lambda = 100,
variance_lower_bound = 0.1,
stationary_ind = TRUE, #unless phi=1 (see below)
type = "pso", # pso recommended over GenSA as GenSA takes significantly longer to search/converge. If simply testing, this may not be as important but in empirical size and power calculations this slowdown is significant.
silence = FALSE,
threshold_stop = 0.05000001, # optimization will stop if test fails to reject (i.e. search until we fail to reject, not highest pval)
converge_check = "none",
type_control = list(maxit = 200))
# ====================================================================
# ====== Params
# ====================================================================
mu <- c(0,0)
sigma <- matrix(c(c(1,0.5),c(0.5,1)),2,2)
ar <- 1
n_ls <- c(100,200,500)
phi_ls <- c(0.1, 0.9)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- 2
k0_ls <- 1
control[["msmu"]] <- TRUE
control[["msvar"]] <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
var_mdl_k1 <- list()
var_mdl_k1[["mu"]] <- mu
var_mdl_k1[["sigma"]] <- sigma
var_mdl_k1[["ar"]] <- ar
var_mdl_k1[["k"]] <- 1
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cl <- makeCluster(6)
registerDoParallel(cl)
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
var_mdl_k1[["n"]] <- n
var_mdl_k1[["phi"]] <- matrix(c(c(phi,-0.25),c(0.25,phi)),2,2)
# ------------- File name and columns titles
file_name <-paste0('MSVAR_MMC_LRT_simulation_',N,'_results_eps_',ifelse(control$eps<0.001,"CI",sub('\\.','',round(control$eps,3))),'_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","MMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
MMCLRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(MMCLRTest_out)){
y_out <- simuVAR(var_mdl_k1)
attempt <- attempt + 1
try(
MMCLRTest_out <- MMCLRTest(y_out$y, ar, k0, k1, control = control)
)
if (is.null(MMCLRTest_out)==FALSE){
# Sometimes, 'pso', does not use initial values and maxit=200 is no longer large enough (need to investigate why this happens randomly)
if ((MMCLRTest_out$pval<0) | (MMCLRTest_out$pval>1)){
MMCLRTest_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',MMCLRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
