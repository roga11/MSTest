phi   = c(0.5,0.2),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_ms_mdl <- MSARmdl(y_ms_simu$y, p = 2, k = 2, control)
y_ms_mdl
plot(y_ms_mdl$St[,2], type = 'l')
lines(y_ms_simu$St[2], col = 'red')
plot(y_ms_mdl$St[,2], type = 'l')
lines(y_ms_simu$St[2], col = 'red')
y_ms_simu$St
plot(y_ms_mdl$St[,2], type = 'l')
lines(y_ms_simu$St, col = 'red')
plot(y_ms_mdl$St[,1], type = 'l')
lines(y_ms_simu$St, col = 'red')
lines(y_ms_simu$St, col = 'red', type = '-')
plot(y_ms_mdl$St[,1], type = 'l')
lines(y_ms_simu$St, col = 'red', lty = 2)
set.seed(1234)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 1000,
p     = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_msvar_mdl <- MSVARmdl(y_msvar_simu$y, p = 1, k = 2, control)
y_msvar_mdl
plot(y_msvar_mdl$St[,1], type = 'l')
plot(y_msvar_mdl$St[,1], type = 'l')
lines(y_msvar_simu$St, col = 'red', lty = 2)
plot(y_msvar_mdl$St[,2], type = 'l')
lines(y_msvar_simu$St, col = 'red', lty = 2)
devtools::document()
library(MSTest)
hamilton84GNP
devtools::document()
library(MSTest)
devtools::document()
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
devtools::document()
warnings()
warnings()
devtools::document()
warnings()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
set.seed(1234)
# Define DGP
mdl_norm <- list(n     = 1000,
mu    = c(5,-2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)))
# Simulate process using simuNorm() function
y_norm_simu <- simuNorm(mdl_norm)
# estimate parameters
y_norm_mdl <- Nmdl(y_norm_simu$y)
y_norm_mdl
Y <- y_norm_simu$y
Y
control = list()
con <- list(const = TRUE,
getSE = TRUE)
# Perform some checks for controls
nmsC <- names(con)
con[(namc <- names(control))] <- control
if(length(noNms <- namc[!namc %in% nmsC])){
warning("unknown names in control: ", paste(noNms,collapse=", "))
}
# ----- Get process dimensions
n <- nrow(Y)
q <- ncol(Y)
# ----- estimate model
if (con$const==TRUE){
mu <- colMeans(Y)
}else{
mu <- rep(0, q)
}
# ----- Obtain variables of interest
resid       <- Y - matrix(1, n, 1)%*%t(as.matrix(mu))
sigma       <- (t(resid)%*%resid)/(n-1)
stdev       <- sqrt(diag(sigma))
theta       <- c(mu,covar_vech(sigma))
theta_mu_ind  <- c(rep(1, q),rep(0,length(theta)-q))
theta_sig_ind <- c(rep(0, q),rep(1,q*(q+1)/2))
theta_mu_ind
theta_sig_ind
c(rep(0, q), rep(t(covar_vech(diag(q)))))
diag(q)
covar_vech(diag(q))
t(covar_vech(diag(q)))
c(rep(0, q), t(covar_vech(diag(q))))
theta_var_ind <- c(rep(0, q), t(covar_vech(diag(q))))
q=1
c(rep(1, q), rep(0,length(theta)-q))
c(rep(0, q), rep(1,q*(q+1)/2))
c(rep(0, q), t(covar_vech(diag(q))))
c(rep(0, q), t(covar_vech(diag(q))),rep(1,q*q*p))
p=1
q=2
c(rep(0, q), t(covar_vech(diag(q))),rep(1,q*q*p))
c(rep(0, q), t(covar_vech(diag(q))),rep(0,q*q*p))
typeof(y_norm_mdl)
attributes(y_norm_mdl)
dir(y_norm_mdl)
devtools::document
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
set.seed(1234)
# Define DGP of VAR process
mdl_var <- list(n     = 1000,
p     = 1,
mu    = c(5,-2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)))
# Simulate process using simuVAR() function
y_simu <- simuVAR(mdl_var)
# Set options for model estimation
control <- list(const  = TRUE,
getSE  = TRUE)
# Estimate model
y_var_mdl <- VARmdl(y_simu$y, p = 1, control)
y_var_mdl
y_var_mdl$X
set.seed(1234)
# Define DGP of VAR process
mdl_3var2 <- list(n     = 1000,
p     = 2,
mu    = c(5,-2,1),
sigma = rbind(c(5.0, 1.5, 2.5),
c(1.5, 1.0, 1.5),
c(2.5, 1.5, 4.2)),
phi   = rbind(c(0.70, 0.30, 0.35,  -0.50, -0.20,   0.25),
c(0.20, 0.40, 0.35,  -0.30,  0.30,   0.25),
c(0.20, 0.30, 0.50,  -0.30, -0.20,  -0.40)))
# Simulate process using simuVAR() function
y3var2_simu <- simuVAR(mdl_3var2)
# Set options for model estimation
control <- list(const  = TRUE,
getSE  = TRUE)
# Estimate model
y_3var2_mdl <- VARmdl(y3var2_simu$y, p = 2, control)
y_3var2_mdl
y_3var2_mdl$x
y_3var2_mdl$X
y_3var2_mdl$mu
y_3var2_mdl$coef
y_3var2_mdl$intercept
y_3var2_mdl$phi
y_3var2_mdl$stdev
y_3var2_mdl$sigma
y_3var2_mdl$stationary
y_3var2_mdl$n
devtools::document()
library(MSTest)
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
devtools::document()
library(MSTest)
devtools::document()
devtools::document()
library(MSTest)
stop("value for $k$ must be greater than or equal to $2$")
stop("value for 'k' must be greater than or equal to 2")
devtools::document()
library(MSTest)
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "MLE",
use_diff_init = 2)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
# --------------------------- Univariate normal process ------------------------
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5),
c(10)),
sigma = list(as.matrix(5.0),
as.matrix(7.0)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "MLE",
use_diff_init = 2)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
attributes(y_hmm_mdl)
dim(y_hmm_mdl$eta)
devtools::document()
library(MSTest)
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
attributes(y_hmm_mdl)
y_hmm_mdl$thl
abs(y_hmm_mdl$thl)
max(abs(y_hmm_mdl$thl))
y_hmm_mdl$iterations
y_hmm_mdl$init_used
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
library(MSTest)
library(MSTest)
set.seed(1234)
# Define DGP of MS AR process
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5,0.2),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_ms_mdl <- MSARmdl(y_ms_simu$y, p = 2, k = 2, control)
y_ms_mdl
class(y_ms_mdl)
dir(y_ms_mdl)
attributes(y_ms_mdl)
y_ms_md$coef
y_ms_mdl$coef
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5),
c(10)),
sigma = list(as.matrix(5.0),
as.matrix(7.0)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
y_hmm_mdl$theta
attributes(y_ms_mdl)
attributes(y_hmm_mdl)
devtools::document()
library(MSTest)
# --------------------------- Univariate normal process ------------------------
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5),
c(10)),
sigma = list(as.matrix(5.0),
as.matrix(7.0)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
set.seed(1234)
# Define DGP
mdl_hmm <- list(n     = 1000,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuHMM() function
y_hmm_simu <- simuHMM(mdl_hmm)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_hmm_mdl <- HMmdl(y_hmm_simu$y, k = 2, control)
y_hmm_mdl
set.seed(1234)
# Define DGP of MS AR process
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5,0.2),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_ms_mdl <- MSARmdl(y_ms_simu$y, p = 2, k = 2, control)
y_ms_mdl
plot(y_ms_mdl$St[,1], type = 'l')
lines(y_ms_simu$St, col = 'red', lty = 2)
y_gnp_gw_84 <- hamilton84GNP$GNP_logdiff
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = FALSE,
method = "MLE",
use_diff_init = 10)
# Estimate model with p=4 and switch in mean only as in Hamilton (1989)
hamilton89_mdl <- MSARmdl(as.matrix(y_gnp_gw_84), p = 4, k = 2, control)
hamilton89_mdl
# plot smoothed probability of recessionary state
plot(hamilton89_mdl$St[,2], type = 'l')
attributes(y_hmm_mdl)
set.seed(1234)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 1000,
p     = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_msvar_mdl <- MSVARmdl(y_msvar_simu$y, p = 1, k = 2, control)
y_msvar_mdl
attributes(y_msvar_mdl)
library(MSTest)
set.seed(1234)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 1000,
p     = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 10)
# Estimate model
y_msvar_mdl <- MSVARmdl(y_msvar_simu$y, p = 1, k = 2, control)
y_msvar_mdl
attributes(y_msvar_mdl)
dim(y_msvar_mdl$X)
y_ms_mdl$mu
y_ms_mdl$stdev
y_ms_mdl$sigma
y_msvar_mdl$mu
y_msvar_mdl$stdev
y_ms_mdl$q
devtools::document()
library(MSTest)
