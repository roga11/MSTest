matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("blue", "red","green3"), lty = c(2,1,3))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
dev.off()
usgnp_msar_mdl24_k3_msmu_msvar
reg_prob <- usgnp_msar_mdl24_k3_msmu_msvar$St[,c(2,3,1)]
matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("blue", "red","green3"), lty = c(2,1,3))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
reg_prob <- usgnp_msar_mdl24_k3_msmu_msvar$St[,c(1,2,3)]
matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("blue", "red","green3"), lty = c(2,1,3))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
reg_prob <- usgnp_msar_mdl24_k3_msmu_msvar$St[,c(3,2,1)]
matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("blue", "red","green3"), lty = c(2,1,3))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
reg_prob <- usgnp_msar_mdl24_k3_msmu_msvar$St[,c(3,1,2)]
matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("blue", "red","green3"), lty = c(2,1,3))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
reg_prob <- usgnp_msar_mdl24_k3_msmu_msvar$St[,c(3,1,2)]
pdf(paste0(fig_out,"US_RealGNP_RegimeProbs_K3_M1_msmu_msvar_1951Q3_2024Q2.pdf"), width = 12, height = 7)
matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("blue", "red","green3"), lty = c(2,1,3))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
dev.off()
usgnp_msar_mdl24_k4_msmu
usgnp_msar_mdl24_k4_msmu_msvar
library(MSTest)
fig_out   <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/empirical/figures/"
res_out   <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/empirical/results/"
data_loc  <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/data/"
seed      <- 1234
p         <- 1
k1        <- 1
k2        <- 2
k3        <- 3
k4        <- 4
N         <- 99
workers   <- 9
burnin    <- 100
est_init  <- 30
test_init <- 10
mmc_eps   <- 0
mmc_CI    <- TRUE
mmc_maxit <- 50
ar_control                <- list(const = TRUE,
getSE = TRUE)
msar_control_msmu_msvar   <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = est_init,
getSE  = TRUE)
msar_control_msmu <- msar_control_msvar <- msar_control_msmu_msvar
msar_control_msmu$msvar <- FALSE
msar_control_msvar$msmu <- FALSE
load(paste0(res_out,"MCLRT_MSM_Empirical_RealGDP.RData"))
plot(dates, Y, type = "l", xlab = "Date", ylab = "Percent (%)")
plot(dates, Y, type = "l", xlab = "Date", ylab = "Percent (%)")
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("red", alpha = 0.3))
pdf(paste0(fig_out,"US_RealGDP_1951Q2_2024Q2.pdf"), width = 12, height = 7)
plot(dates, Y, type = "l", xlab = "Date", ylab = "Percent (%)")
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = dates[rec_st], xright = dates[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("red", alpha = 0.3))
dev.off()
library(MSTest)
fig_out   <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/empirical/figures/"
res_out   <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/empirical/results/"
data_loc  <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/data/"
seed      <- 1234
p         <- 4
k1        <- 1
k2        <- 2
k3        <- 3
k4        <- 4
N         <- 99
workers   <- 9
burnin    <- 100
est_init  <- 30
test_init <- 10
mmc_eps   <- 0
mmc_CI    <- TRUE
mmc_maxit <- 50
ar_control                <- list(const = TRUE,
getSE = TRUE)
msar_control_msmu_msvar   <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = est_init,
getSE  = TRUE)
msar_control_msmu <- msar_control_msvar <- msar_control_msmu_msvar
msar_control_msmu$msvar <- FALSE
msar_control_msvar$msmu <- FALSE
load(paste0(res_out,"MCLRT_MSM_Empirical_USGNP.RData"))
reg_prob <- usgnp_msar_mdl24_k2_msmu$St[,c(2,1)]
matplot(dates[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("green3","red"), lty = c(2,1))
us_gnp24_date
matplot(us_gnp24_date[(p+1):length(dates)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("green3","red"), lty = c(2,1))
matplot(us_gnp24_date[(p+1):length(us_gnp24_date)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("green3","red"), lty = c(2,1))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = us_gnp24_date[rec_st], xright = us_gnp24_date[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
reg_prob <- usgnp_msar_mdl24_k2_msmu_msvar$St[,c(2,1)]
matplot(us_gnp24_date[(p+1):length(us_gnp24_date)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("green3","red"), lty = c(2,1))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = us_gnp24_date[rec_st], xright = us_gnp24_date[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
reg_prob <- usgnp_msar_mdl24_k2_msmu_msvar$St[,c(2,1)]
pdf(paste0(fig_out,"US_RealGNP_RegimeProbs_K2_M1_msmu_msvar_1951Q3_2024Q2.pdf"), width = 12, height = 7)
matplot(us_gnp24_date[(p+1):length(us_gnp24_date)], reg_prob, type = "l", xlab = "Date", ylab = "Percent (%)", col=c("green3","red"), lty = c(2,1))
rec_st <- which(c(0,diff(BCind24))==1)
rec_ed <- which(c(0,diff(BCind24))==-1)-1
rect(xleft = us_gnp24_date[rec_st], xright = us_gnp24_date[rec_ed], ybottom = par("usr")[3], ytop = par("usr")[4],
border = NA, col = adjustcolor("grey", alpha = 0.3))
dev.off()
usgnp_ar_mdl24
usgnp_msar_mdl24_k2_msmu_msvar$phi
usgnp_msar_mdl24_k3_msmu_msvar
usgnp_msar_mdl24_k2_msmu_msvar$stdev
usgnp_msar_mdl24_k3_msmu_msvar$sigma
kk <-3
mdl_2_reg <- c(2,1)
mdl_3_reg <- c(3,2,1)
mdlk1 <- c(usgnp_ar_mdl24$mu,NaN,NaN,usgnp_ar_mdl24$phi,usgnp_ar_mdl24$stdev,NaN,NaN,rep(NaN,kk*kk),usgnp_ar_mdl24$logLike)
mdlk2 <- c(usgnp_msar_mdl24_k2_msmu_msvar$mu[mdl_2_reg],NaN,usgnp_msar_mdl24_k2_msmu_msvar$phi,usgnp_msar_mdl24_k2_msmu_msvar$stdev[mdl_2_reg],NaN,rbind(cbind(usgnp_msar_mdl24_k2_msmu_msvar$P[mdl_2_reg,mdl_2_reg],c(NaN,NaN)),c(NaN,NaN,NaN)),usgnp_msar_mdl24_k2_msmu_msvar$logLike)
mdlk3 <- c(usgnp_msar_mdl24_k3_msmu_msvar$mu[mdl_3_reg],usgnp_msar_mdl24_k3_msmu_msvar$phi,usgnp_msar_mdl24_k3_msmu_msvar$sigma[mdl_3_reg],usgnp_msar_mdl24_k3_msmu_msvar$P[mdl_3_reg,mdl_3_reg],usgnp_msar_mdl24_k3_msmu_msvar$logLike)
names(mdlk1) <- names(mdlk2) <- names(mdlk3) <- c(paste0("\\mu_", (1:kk)),paste0("\\phi_",(1:p)),paste0("\\sigma_", (1:kk)),
paste0("p_{",c(sapply((1:kk),function(x) paste0(x, (1:kk)) )),"}"),c("logLike"))
mdlk1 <- t(data.frame(mdlk1))
mdlk2 <- t(data.frame(mdlk2))
mdlk3 <- t(data.frame(mdlk3))
out <- merge(merge(mdlk3,mdlk2,all=T),mdlk1,all=T)
out <- format(round(out[c(1,3,2),],2),nsmall=2)
out
out <- merge(merge(mdlk3,mdlk2,all=T),mdlk1,all=T)
out <- format(round(out[c(1,2,3),],2),nsmall=2)
out
mdlk1 <- c(usgnp_ar_mdl24$mu,NaN,NaN,usgnp_ar_mdl24$phi,usgnp_ar_mdl24$stdev,NaN,NaN,rep(NaN,kk*kk),usgnp_ar_mdl24$logLike)
mdlk2 <- c(usgnp_msar_mdl24_k2_msmu_msvar$mu[mdl_2_reg],NaN,usgnp_msar_mdl24_k2_msmu_msvar$phi,usgnp_msar_mdl24_k2_msmu_msvar$stdev[mdl_2_reg],NaN,rbind(cbind(usgnp_msar_mdl24_k2_msmu_msvar$P[mdl_2_reg,mdl_2_reg],c(NaN,NaN)),c(NaN,NaN,NaN)),usgnp_msar_mdl24_k2_msmu_msvar$logLike)
mdlk3 <- c(usgnp_msar_mdl24_k3_msmu_msvar$mu[mdl_3_reg],usgnp_msar_mdl24_k3_msmu_msvar$phi,usgnp_msar_mdl24_k3_msmu_msvar$stdev[mdl_3_reg],usgnp_msar_mdl24_k3_msmu_msvar$P[mdl_3_reg,mdl_3_reg],usgnp_msar_mdl24_k3_msmu_msvar$logLike)
names(mdlk1) <- names(mdlk2) <- names(mdlk3) <- c(paste0("\\mu_", (1:kk)),paste0("\\phi_",(1:p)),paste0("\\sigma_", (1:kk)),
paste0("p_{",c(sapply((1:kk),function(x) paste0(x, (1:kk)) )),"}"),c("logLike"))
mdlk1 <- t(data.frame(mdlk1))
mdlk2 <- t(data.frame(mdlk2))
mdlk3 <- t(data.frame(mdlk3))
out <- merge(merge(mdlk3,mdlk2,all=T),mdlk1,all=T)
out <- format(round(out[c(1,2,3),],2),nsmall=2)
out
# ============================================================================ #
# Author: Gabriel Rodriguez Rondon
# email: gabriel.rodriguezrondon@mail.mcgill.ca
# This version: 12-Apr-2023
#
# Notes:
# This script can be used to replicate simulation results for "Monte Carlo
# Likelihood Ratio Tests for Markov Switching Models" by Gabriel Rodriguez
# Rondon & Jean-Marie Dufour. It was prepared using v0.1.2
# of MSTest available through CRAN.
# ============================================================================ #
library(MSTest)
library(foreach)
library(doParallel)
setwd("/Users/gabrielrodriguezrondon/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/")
seed <- 12345
# Optimization controls
N                 <- 500
Nsim              <- 1000
workers           <- 12
rho               <- 0.7
chp_control <- list(N = N,
rho_b = rho)
# Parameters of DGP (under null hypothesis)
k0          <- 1
k1          <- 2
ar_mdl_k2   <- list(k = k1)
mu_ls       <- c(0,2)
sigma_ls    <- c(1,4)
n_ls        <- c(100,200,500)
phi_ls      <- c(0.1, 0.9, 1)
P22_ls      <- c(0.90, 0.50, 0.9999)
param_ls <- list()
param_ls$n <- n_ls
param_ls$phi <- phi_ls
param_ls$mu_ls <- mu_ls
param_ls$sigma_ls <- sigma_ls
param_ls$P22_ls <-P22_ls
combined_list <- expand.grid(param_ls)
combined_list["mu_1"] = 0
combined_list["sigma_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["sigma_ls"]==1) + (combined_list["sigma_1"]==1))!=4,]
msmu_T <- (combined_list[,3] != combined_list[,6])
msvar_T <- (combined_list[,4] != combined_list[,7])
combined_list <- combined_list[((msmu_T==T) & (msvar_T==F)),]
row.names(combined_list) <- NULL
combined_list
i=1
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
p22 <- combined_list[i,5]
# ------------- Model
ar_mdl_k2$n <- n
ar_mdl_k2$phi <- phi
ar_mdl_k2$mu <- c(mu_1,mu_2)
ar_mdl_k2$sigma <- c(stdev_1,stdev_2)
ar_mdl_k2$P <- cbind(c(0.9,0.10),c(1-p22,p22))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
p       <- length(phi)
chp_control$msvar <- msvar
mdl_h0_tmp <- ARmdl(y_out$y,p)
y_out <- MSTest::simuMSAR(ar_mdl_k2)
mdl_h0_tmp <- ARmdl(y_out$y,p)
mdl_h0_tmp
bootim <- MSTest::bootCV(mdl_h0_tmp,chp_control$rho_b,N,chp_control$msvar)
bootim
sort(bootim[,1])
alpha
alpha <- 0.05
sort(bootim[,1])[N*(1-alpha)]
y_out <- MSTest::simuMSAR(ar_mdl_k2)
y_out <- MSTest::simuMSAR(ar_mdl_k2)
y_out
attempt <- attempt + 1
attempt <- 0
null_control <- list(const = TRUE, getSE = con$getSE)
null_control <- list(const = TRUE, getSE = chp_control$getSE)
null_control
mdl_h0  <- ARmdl(Y, p, null_control)
mdl_h0  <- ARmdl(y_out$y, p, null_control)
null_control <- list(const = TRUE, getSE = FALSE)
null_control
mdl_h0  <- ARmdl(y_out$y, p, null_control)
ltmt    <- chpDmat(mdl_h0, con$msvar)
cv3     <- chpStat(mdl_h0, chp_control$rho_b, ltmt, chp_control$msvar)
ltmt    <- chpDmat(mdl_h0, chp_control$msvar)
cv3     <- chpStat(mdl_h0, chp_control$rho_b, ltmt, chp_control$msvar)
supts   <- cv3[1]
expts   <- cv3[2]
supts
expts
spTS_levelcv <- sort(bootim[,1])[N*(1-alpha)]
spTS_levelcv <- sort(bootim[,2])[N*(1-alpha)]
spTS_levelcv <- sort(bootim[,1])[N*(1-alpha)]
expTS_levelcv <- sort(bootim[,2])[N*(1-alpha)]
expTS_levelcv
spTS_levelcv
expts
file_name_size <-paste0('simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi)'_msmu.txt')
file_name_size <-paste0('simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_msmu.txt')
file_name_size
file_name_size
size_res <- read.table(file_name_size, header = TRUE, sep = ",")
dir <- "/Users/gabrielrodriguezrondon/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/"
paste0(dir,'simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_msmu.txt')
file_name_size <-paste0(dir,'simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_msmu.txt')
size_res <- read.table(file_name_size, header = TRUE, sep = ",")
getwd()
file_name_size <-paste0(dir,'simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_msmu.txt')
size_res <- read.table(file_name_size, header = TRUE, sep = ",")
size_res <- read.table(file_name_size, header = TRUE, sep = ",")
library(MSTest)
# ============================================================================ #
# Author: Gabriel Rodriguez Rondon
# email: gabriel.rodriguezrondon@mail.mcgill.ca
# This version: 12-Apr-2023
#
# Notes:
# This script can be used to replicate simulation results for "Monte Carlo
# Likelihood Ratio Tests for Markov Switching Models" by Gabriel Rodriguez
# Rondon & Jean-Marie Dufour. It was prepared using v0.1.2
# of MSTest available through CRAN.
# ============================================================================ #
library(MSTest)
library(foreach)
library(doParallel)
setwd("/Users/gabrielrodriguezrondon/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/")
# ============================================================================ #
# ----- USE INPUT -----
# ============================================================================ #
seed <- 12345
# Optimization controls
N                 <- 500
Nsim              <- 1000
workers           <- 12
rho               <- 0.7
chp_control <- list(N = N,
rho_b = rho)
# Parameters of DGP (under null hypothesis)
k0          <- 1
k1          <- 2
ar_mdl_k2   <- list(k = k1)
mu_ls       <- c(0,2)
sigma_ls    <- c(1,4)
n_ls        <- c(100,200,500)
phi_ls      <- c(0.1, 0.9)#, 1)
P22_ls      <- c(0.90, 0.50)#, 0.9999)
# ============================================================================ #
# -----  Parallel Loop -----
# ============================================================================ #
param_ls <- list()
param_ls$n <- n_ls
param_ls$phi <- phi_ls
param_ls$mu_ls <- mu_ls
param_ls$sigma_ls <- sigma_ls
param_ls$P22_ls <-P22_ls
combined_list <- expand.grid(param_ls)
combined_list["mu_1"] = 0
combined_list["sigma_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["sigma_ls"]==1) + (combined_list["sigma_1"]==1))!=4,]
msmu_T <- (combined_list[,3] != combined_list[,6])
msvar_T <- (combined_list[,4] != combined_list[,7])
combined_list <- combined_list[((msmu_T==T) & (msvar_T==F)),]
row.names(combined_list) <- NULL
# ------------- Set up clusters
cl <- makeCluster(workers)
registerDoParallel(cl)
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
p22 <- combined_list[i,5]
# ------------- Model
ar_mdl_k2$n <- n
ar_mdl_k2$phi <- phi
ar_mdl_k2$mu <- c(mu_1,mu_2)
ar_mdl_k2$sigma <- c(stdev_1,stdev_2)
ar_mdl_k2$P <- cbind(c(0.9,0.10),c(1-p22,p22))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
p       <- length(phi)
chp_control$msvar <- msvar
# ------------- File name and columns titles
file_name <-paste0('simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_power_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,
'_p22_',sub('\\.','',p22),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","supTS,","expTS,","supTS_Pvalue,","expTS_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
set.seed(seed + i + xi)
CHP_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(CHP_out)) {
y_out <- MSTest::simuMSAR(ar_mdl_k2)
if ((length(table(y_out$St))==k1) & all(as.matrix(table(y_out$St))>=(n*0.1))){ # only use simulation if each regime is at least 10% of sample size
attempt <- attempt + 1
try(
CHP_out <- MSTest::CHPTest(y_out$y, p,control = chp_control)
)
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',round(endT[3],3),',',CHP_out$supTS,',',CHP_out$expTS,',',CHP_out$pval_supTS,',',CHP_out$pval_expTS)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
arma::
## Submission
This is a resubmission. In this version I have:
devtools::doc
devtools::document()
devtools::check_win_release()
# ----- Bivariate VAR(1) process ----- #
set.seed(1234)
# Define DGP of VAR process
mdl_var <- list(n     = 1000,
p     = 1,
q     = 2,
mu    = c(5,-2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)))
# Simulate process using simuVAR() function
y_simu <- simuVAR(mdl_var)
library(MSTest)
# ----- Bivariate VAR(1) process ----- #
set.seed(1234)
# Define DGP of VAR process
mdl_var <- list(n     = 1000,
p     = 1,
q     = 2,
mu    = c(5,-2),
sigma = rbind(c(5.0, 1.5),
c(1.5, 1.0)),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)))
# Simulate process using simuVAR() function
y_simu <- simuVAR(mdl_var)
# Set options for model estimation
control <- list(const  = TRUE,
getSE  = TRUE)
# Estimate model
y_var_mdl <- VARmdl(y_simu$y, p = 2, control = control)
summary(y_var_mdl)
logLike(y_var_mdl)
MSTest::logLik(y_var_mdl)
logLik(y_var_mdl)
devtools::submit_cran()
load("~/Dropbox/Res/papers/MSTest_Rpack/MSTest/.RData")
set.seed(123)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 200,
p     = 1,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
library(MSTest)
set.seed(123)
# Define DGP of MS VAR process
mdl_msvar2 <- list(n     = 200,
p     = 1,
q     = 2,
mu    = rbind(c(5, -2),
c(10, 2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.90, 0.10),
c(0.10, 0.90)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
# Set options for model estimation
control <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = 1)
y_msvar_mdl <- MSVARmdl(y_msvar_simu$y, p = 1, k = 2, control = control)
summary(y_msvar_mdl)
mmc_control = list(N = 19,
burnin = 100,
converge_check = NULL,
eps = 0.1,
CI_union = TRUE,
silence = FALSE,
threshold_stop = 0.05 + 1e-6,
type = "pso",
maxit = 100,
mdl_h0_control = list(const  = TRUE,
getSE  = TRUE),
mdl_h1_control = list(msmu   = TRUE,
msvar  = TRUE,
getSE  = TRUE,
method = "EM",
use_diff_init = 1))
MMCtest <- MMCLRTest(y_msvar_simu$y, p = 1 , k0 = 1 , k1 = 2, control = mmc_control)
MMCtest
y_msvar_simu <- simuMSVAR(mdl_msvar2)
MMCtest <- MMCLRTest(y_msvar_simu$y, p = 1 , k0 = 1 , k1 = 2, control = mmc_control)
