devtools::document()
library(MSTest)
tmp_dir <- tempdir()
tmp_dir
library(MSTest)
sd_y <- 5
y <- rnorm(1000)*sd_y
x <- y - rnorm(Ts)*sd_x
Ts <- 1000
sd_y <- 5
sd_y <- 2
y <- rnorm(Ts)*sd_y
x <- y - rnorm(Ts)*sd_x
Ts <- 1000
sd_y <- 5
sd_x <- 2
y <- rnorm(Ts)*sd_y
x <- y - rnorm(Ts)*sd_x
cov(c(y,x))
c(y,x)
cbind(y,x)
cov(cbind(y,x))
sd_y <- 1
sd_x <- 1
sd_2 <- 1
y <- rnorm(Ts)*sd_y
x <- y - rnorm(Ts)*sd_x
z <- x - rnorm(Ts)*sd_x
cov(cbind(y,x,z))
library(MSTest)
mdl_mn <- list(n=Ts,
mu=c(0,0),
sigma=rbind(c(1.0, 0.75),
c(0.75, 1.0)))
xz <- simuNorm(mdl_mn)
xz
xz_mdl <- simuNorm(mdl_mn)
xz <- xz_mdl$y
cbind(y,xz)
cov(cbind(y,xz))
y <- xz + rnorm(Ts)*sd_y
cov(cbind(y,xz))
Ts <- 1000
sd_y <- 1
sd_x <- 1
sd_2 <- 1
xz_cov <- 0.75
mdl_mn <- list(n=Ts,
mu=c(0,0),
sigma=rbind(c(sd_x, xz_cov),
c(xz_cov, sd_z)))
xz_mdl <- simuNorm(mdl_mn)
xz <- xz_mdl$y
y <- xz + rnorm(Ts)*sd_y
cov(cbind(y,xz))
Ts <- 1000
sd_y <- 1
sd_x <- 1
sd_z <- 1
xz_cov <- 0.75
mdl_mn <- list(n=Ts,
mu=c(0,0),
sigma=rbind(c(sd_x, xz_cov),
c(xz_cov, sd_z)))
xz_mdl <- simuNorm(mdl_mn)
xz <- xz_mdl$y
y <- xz + rnorm(Ts)*sd_y
cov(cbind(y,xz))
x <- xz[,1]
z <- xz[,2]
mdl_true <- lm(y~x+z)
mdl_true
mdl_true <- lm(y~x)
mdl_bias <- lm(y~x)
mdl_true <- lm(y~x+z)
mdl_true
mdl_bias
mdl_true$coefficients$x
mdl_true$coefficients
mdl_true$coefficients[2,1]
mdl_bias$coefficients[2,1]
mdl_true$coefficients[2,1] - mdl_bias$coefficients[2,1]
devtools::document()
devtools::document()
#'  \item{"use_diff_init"}{integer determining how many different initital values (that do not return NaN) to try. Default is 1.}
#'  \item{"init_value"}{vector of initial values. This is optional. Default is NUll, in which case 'initValsMS()' is used to generate initial values.}
#' }
#'
#' @return List with model characteristics
#'
#' @references Dempster, A. P., N. M. Laird, and D. B. Rubin. 1977. “Maximum Likelihood from Incomplete Data via the EM Algorithm.” Journal of the Royal Statistical Society. Series B 39 (1): 1–38
#' @references Hamilton, James D. 1990. “Analysis of time series subject to changes in regime.” Journal of econometrics, 45 (1-2): 39–70
#'
#' @export
MSmdl_EM <- function(Y, ar, k, control = list()){
# ----- Set control values
con <- list(msmu = TRUE,
msvar = TRUE,
maxit = 10000,
thtol = 1.e-6,
getSE = FALSE,
max_init = 500,
use_diff_init = 1,
init_value = NULL)
# Perform some checks for controls
nmsC <- names(con)
con[(namc <- names(control))] <- control
if(length(noNms <- namc[!namc %in% nmsC])){
warning("unknown names in control: ", paste(noNms,collapse=", "))
}
# ---------- Optimization options
optim_options <- list(maxit = con[["maxit"]], thtol = con[["thtol"]])
# ---------- Estimate linear model to use for initial values
mdl_out <- ARmdl(Y, ar = ar, intercept = TRUE, getSE = con[["getSE"]])
msmu <- con[["msmu"]]
msvar <- con[["msvar"]]
mdl_out[["msmu"]] = msmu
mdl_out[["msvar"]] = msvar
# ---------- Estimate model
EM_output_all <- list(con[["use_diff_init"]])
max_loglik <- matrix(0, con[["use_diff_init"]], 1)
if (is.null(con[["init_value"]])==FALSE){
# ----- Estimate using initial values provided
EM_output <- MS_EMest(con[["init_value"]], mdl_out, k, optim_options)
EM_output[["theta_0"]] <- con[["init_value"]]
EM_output[["init_used"]] <- 1
}else{
# ----- Estimate using 'use_diff_init' different initial values
for (xi in 1:con[["use_diff_init"]]){
init_used <- 0
converge_check <- FALSE
while ((converge_check==FALSE) & (init_used<con[["max_init"]])){
# ----- Initial values
theta_0 <- initValsMS(mdl_out, k)
# ----- Estimate using EM algorithm
EM_output_tmp <- MS_EMest(theta_0, mdl_out, k, optim_options)
EM_output_tmp[["theta_0"]] = theta_0
# ----- Convergence check
logLike_tmp = EM_output_tmp[["logLike"]]
theta_tmp = EM_output_tmp[["theta"]]
converge_check = ((is.finite(logLike_tmp)) & (all(is.finite(theta_tmp))))
init_used = init_used + 1
}
max_loglik[xi] = logLike_tmp
EM_output_tmp[["init_used"]] = init_used
EM_output_all[[xi]] = EM_output_tmp
}
if (con[["use_diff_init"]]==1){
EM_output = EM_output_tmp
}else{
xl = which.max(max_loglik)
if (length(xl)==0){
warning("Model(s) did not converge. Use higher 'use_diff_init' or 'max_init'.")
EM_output = EM_output_all[[1]]
}else{
EM_output = EM_output_all[[xl]]
}
}
}
# ---------- organize output
theta_mu_ind <- c(rep(1, 1 + (k-1)*msmu), rep(0, 1 + (k-1)*msvar + ar + k*k))
theta_sig_ind <- c(rep(0, 1 + (k-1)*msmu), rep(1, 1 + (k-1)*msvar), rep(0, ar + k*k))
theta_phi_ind <- c(rep(0, 2 + (k-1)*msmu + (k-1)*msvar), rep(1, ar), rep(0, k*k))
theta_P_ind <- c(rep(0, 2 + (k-1)*msmu + (k-1)*msvar + ar), rep(1, k*k))
MSARmdl_output <- EM_output
MSARmdl_output[["theta_mu_ind"]] = theta_mu_ind
MSARmdl_output[["theta_sig_ind"]] = theta_sig_ind
MSARmdl_output[["theta_phi_ind"]] = theta_phi_ind
MSARmdl_output[["theta_P_ind"]] = theta_P_ind
MSARmdl_output[["stdev"]] <- sqrt(EM_output[["sigma"]])
MSARmdl_output[["y"]] <- mdl_out[["y"]]
MSARmdl_output[["ar"]] <- ar
MSARmdl_output[["n"]] <- mdl_out[["n"]]
MSARmdl_output[["q"]] <- 1
MSARmdl_output[["k"]] <- k
MSARmdl_output[["x"]] <- mdl_out[["x"]]
MSARmdl_output[["X"]] <- mdl_out[["X"]]
MSARmdl_output[["msmu"]] <- con[["msmu"]]
MSARmdl_output[["msvar"]] <- con[["msvar"]]
MSARmdl_output[["control"]] <- con
if (con[["getSE"]]==TRUE){
Hess <- getHess(MSARmdl_output, k)
info_mat <- solve(-Hess)
nearPD_used <- FALSE
if ((all(is.na(Hess)==FALSE)) & (any(diag(info_mat)<0))){
info_mat <- nearPD(info_mat)
nearPD_used <- TRUE
}
MSARmdl_output[["Hess"]] <- Hess
MSARmdl_output[["theta_stderr"]] <- sqrt(diag(info_mat))
MSARmdl_output[["info_mat"]] <- info_mat
MSARmdl_output[["nearPD_used"]] <- nearPD_used
}
if (is.null(con[["init_value"]])){
MSARmdl_output[["trace"]] <- EM_output_all
}
return(MSARmdl_output)
}
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
devtools::document()
library(MSTest)
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5,0.2),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_ms_simu <- simuMSAR(mdl_ms2)
y_ms_mdl <- MSARmdl(y_ms_simu$y, ar = y_ms_simu$ar, k = y_ms_simu$k, msmu = TRUE, msvar = TRUE, use_diff_init = 10)
y_ms_mdl <- MSARmdl_EM(y_ms_simu$y, ar = y_ms_simu$ar, k = y_ms_simu$k, msmu = TRUE, msvar = TRUE, use_diff_init = 10)
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5,0.2),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_ms_simu <- simuMSAR(mdl_ms2)
control <- list(msmu  = TRUE,
msvar = TRUE,
use_diff_init = 10)
y_ms_mdl <- MSARmdl_EM(y_ms_simu$y, ar = y_ms_simu$ar, k = y_ms_simu$k, control)
y_ms_mdl$logLike
y_ms_mdl$mu
y_ms_mdl$logLike
y_ms_mdl$stdev
y_ms_mdl$phi
y_ms_mdl$P
devtools::document()
library(MSTest)
# Define DGP of MS AR process
mdl_ms2 <- list(n     = 500,
mu    = c(5,10),
sigma = c(1,2),
phi   = c(0.5,0.2),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
# Simulate process using simuMSAR() function
y_ms_simu <- simuMSAR(mdl_ms2)
# Set options for model estimation
control <- list(msmu  = TRUE,
msvar = TRUE,
use_diff_init = 10)
# Estimate model
y_ms_mdl <- MSARmdl_EM(y_ms_simu$y, ar = y_ms_simu$ar, k = y_ms_simu$k, control)
y_ms_mdl$logLike
y_ms_mdl$mu
y_ms_mdl$phi
y_ms_mdl$stdev
y_ms_mdl$P
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(6.0, 2.3),
c(2.3, 2.0))),
phi   = rbind(c(0.20, 0.15),
c(0.10, 0.30)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(6.0, 2.3),
c(2.3, 2.0))),
phi   = rbind(c(0.20, 0.15),
c(0.10, 0.30)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_msvar_simu <- simuMSVAR(mdl_msvar2)
control <- list(msmu = TRUE,
msvar = FALSE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
library(MSTest)
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(6.0, 2.3),
c(2.3, 2.0))),
phi   = rbind(c(0.20, 0.15),
c(0.10, 0.30)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_msvar_simu <- simuMSVAR(mdl_msvar2)
control <- list(msmu = TRUE,
msvar = FALSE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
control <- list(msmu = TRUE,
msvar = TRUE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
y_msvar_mdl$phi
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(6.0, 2.3),
c(2.3, 2.0))),
phi   = rbind(c(0.20, 0.15),
c(0.10, 0.30)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_msvar_simu <- simuMSVAR(mdl_msvar2)
control <- list(msmu = TRUE,
msvar = TRUE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
y_msvar_mdl$phi
mdl_msvar2 <- list(n     = 1000,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(6.0, 2.3),
c(2.3, 2.0))),
phi   = rbind(c(0.20, 0.15),
c(0.10, 0.30)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_msvar_simu <- simuMSVAR(mdl_msvar2)
control <- list(msmu = TRUE,
msvar = TRUE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
y_msvar_mdl$phi
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(7.0, 3.30),
c(3.0, 2.0)))
sigma[[2]]
sigma = list(rbind(c(5.0, 2.0),
c(2.0, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0)))
sigma[[2]]
cov2corr(sigma[[2]])
cov2corr(sigma[[1]])
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0)))
cov2corr(sigma[[1]])
cov2corr(sigma[[2]])
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.20, 0.15),
c(0.10, 0.30)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_msvar_simu <- simuMSVAR(mdl_msvar2)
control <- list(msmu = TRUE,
msvar = TRUE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
y_msvar_mdl$phi
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
y_msvar_simu <- simuMSVAR(mdl_msvar2)
control <- list(msmu = TRUE,
msvar = TRUE,
use_diff_init = 10)
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
y_msvar_mdl$phi
y_msvar_mdl$P
devtools::document()
library(MSTest)
# Define DGP of MS AR process
mdl_msvar2 <- list(n     = 500,
ar    = 1,
mu    = rbind(c(5,-2),
c(10,2)),
sigma = list(rbind(c(5.0, 1.5),
c(1.5, 1.0)),
rbind(c(7.0, 3.0),
c(3.0, 2.0))),
phi   = rbind(c(0.50, 0.30),
c(0.20, 0.70)),
k     = 2,
P     = rbind(c(0.1,0.9),
c(0.9,0.1)))
# Simulate process using simuMSVAR() function
y_msvar_simu <- simuMSVAR(mdl_msvar2)
# Set options for model estimation
control <- list(msmu = TRUE,
msvar = TRUE,
use_diff_init = 10)
# Estimate model
y_msvar_mdl <- MSVARmdl_EM(y_msvar_simu$y, ar = y_msvar_simu$ar, k = y_msvar_simu$k, control)
y_msvar_mdl$logLike
y_msvar_mdl$mu
y_msvar_mdl$sigma
y_msvar_mdl$phi
y_msvar_mdl$P
load(hamilton84GNP)
hamilton84GNP
y_gnp_gw_84 <- hamilton84GNP$GNP_logdiff
y_gnp_gw_84 <- hamilton84GNP$GNP_logdiff
# Set options for model estimation
control <- list(msmu  = TRUE,
msvar = FALSE,
use_diff_init = 10)
# Use GNP growth 1951Q2 - 1984Q4
y_gnp_gw_84 <- hamilton84GNP$GNP_logdiff
# Set options for model estimation
control <- list(msmu  = TRUE,
msvar = FALSE,
use_diff_init = 10)
# Estimate model
y_ms_mdl <- MSARmdl_EM(y_gnp_gw_84, ar = 4, k = 2, control)
y_ms_mdl$mu
y_ms_mdl$phi
y_ms_mdl$P
y_ms_mdl$stdev
