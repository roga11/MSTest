phi = combined_list[i,2],
mu = combined_list[i,6],
sigma= combined_list[i,7],
p = 1)
null_control <- list(const = TRUE, getSE = FALSE)
level_corr_cv_mat <- MSTest::bootCV(ar_mdl_k1,chp_control$rho_b,250,chp_control$msvar)
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
p22 <- combined_list[i,5]
# ------------- Model
ar_mdl_k2$n <- n
ar_mdl_k2$phi <- phi
ar_mdl_k2$mu <- c(mu_1,mu_2)
ar_mdl_k2$sigma <- c(stdev_1,stdev_2)
ar_mdl_k2$P <- cbind(c(0.9,0.10),c(1-p22,p22))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
p       <- length(phi)
chp_control$msvar <- msvar
st <- proc.time()
ar_mdl_k1 <- list(n = combined_list[i,1],
phi = combined_list[i,2],
mu = combined_list[i,6],
sigma= combined_list[i,7],
p = 1)
null_control <- list(const = TRUE, getSE = FALSE)
st <- proc.time()
level_corr_cv_mat <- MSTest::bootCV(ar_mdl_k1,chp_control$rho_b,250,chp_control$msvar)
end <- proc.time()- st
supTS_levecorr_cv <- sort(level_corr_cv_mat[,1])[round(Nsim*(1-alpha))]
expTS_levecorr_cv <- sort(level_corr_cv_mat[,2])[(round(Nsim*(1-alpha)))]
# file_name_size <-paste0(dir,'simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
#                    '_n_',n,'_phi_',sub('\\.','',phi),'_msmu.txt')
# size_res <- read.table(file_name_size, header = TRUE, sep = ",")
# supTS_levecorr_cv <- sort(size_res$supTS)[length(size_res$supTS)*(1-alpha)]
# expTS_levecorr_cv <- sort(size_res$expTS)[length(size_res$expTS)*(1-alpha)]
#
# ------------- File name and columns titles
file_name <-paste0(dir,'simulations/results/CHP_NEW_Boots_',N,'_rho_',sub('\\.','',rho),'_results_level_corr_power_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,
'_p22_',sub('\\.','',p22),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","supTS,","expTS,","supTS_lvlcv,","expTS_lvlcv,","supTS_rej,","expTS_rej")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
set.seed(seed + i + xi)
CHP_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(CHP_out)) {
y_out <- MSTest::simuMSAR(ar_mdl_k2)
if ((length(table(y_out$St))==k1) & all(as.matrix(table(y_out$St))>=(n*0.1))){ # only use simulation if each regime is at least 10% of sample size
attempt <- attempt + 1
null_control <- list(const = TRUE, getSE = FALSE)
mdl_h0  <- ARmdl(y_out$y, p, null_control)
# --------------- Get first and second derivatives
ltmt    <- chpDmat(mdl_h0, chp_control$msvar)
# --------------- calculate supTS and expTS test statistic
cv3     <- chpStat(mdl_h0, chp_control$rho_b, ltmt, chp_control$msvar)
supts   <- cv3[1]
expts   <- cv3[2]
if (is.finite(supts) & is.finite(expts)){
CHP_out <- list(supTS=supts,expTS=expts)
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',round(endT[3],3),',',CHP_out$supTS,',',CHP_out$expTS,',',supTS_levecorr_cv,',',expTS_levecorr_cv,',',
as.numeric(CHP_out$supTS>supTS_levecorr_cv),',',as.numeric(CHP_out$expTS>expTS_levecorr_cv))
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
sim_res
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_res
supTS_levecorr_cv
level_corr_cv_mat[,1]
sort(level_corr_cv_mat[,1])
end
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
p22 <- combined_list[i,5]
# ------------- Model
ar_mdl_k2$n <- n
ar_mdl_k2$phi <- phi
ar_mdl_k2$mu <- c(mu_1,mu_2)
ar_mdl_k2$sigma <- c(stdev_1,stdev_2)
ar_mdl_k2$P <- cbind(c(0.9,0.10),c(1-p22,p22))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
p       <- length(phi)
chp_control$msvar <- msvar
st <- proc.time()
ar_mdl_k1 <- list(n = combined_list[i,1],
phi = combined_list[i,2],
mu = combined_list[i,6],
sigma= combined_list[i,7],
p = 1)
null_control <- list(const = TRUE, getSE = FALSE)
st <- proc.time()
level_corr_cv_mat <- MSTest::bootCV(ar_mdl_k1,chp_control$rho_b,Nsim,chp_control$msvar)
end <- proc.time()- st
supTS_levecorr_cv <- sort(level_corr_cv_mat[,1])[round(Nsim*(1-alpha))]
expTS_levecorr_cv <- sort(level_corr_cv_mat[,2])[(round(Nsim*(1-alpha)))]
# file_name_size <-paste0(dir,'simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
#                    '_n_',n,'_phi_',sub('\\.','',phi),'_msmu.txt')
# size_res <- read.table(file_name_size, header = TRUE, sep = ",")
# supTS_levecorr_cv <- sort(size_res$supTS)[length(size_res$supTS)*(1-alpha)]
# expTS_levecorr_cv <- sort(size_res$expTS)[length(size_res$expTS)*(1-alpha)]
#
# ------------- File name and columns titles
file_name <-paste0(dir,'simulations/results/CHP_NEW_Boots_',N,'_rho_',sub('\\.','',rho),'_results_level_corr_power_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,
'_p22_',sub('\\.','',p22),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","supTS,","expTS,","supTS_lvlcv,","expTS_lvlcv,","supTS_rej,","expTS_rej")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
set.seed(seed + i + xi)
CHP_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(CHP_out)) {
y_out <- MSTest::simuMSAR(ar_mdl_k2)
if ((length(table(y_out$St))==k1) & all(as.matrix(table(y_out$St))>=(n*0.1))){ # only use simulation if each regime is at least 10% of sample size
attempt <- attempt + 1
null_control <- list(const = TRUE, getSE = FALSE)
mdl_h0  <- ARmdl(y_out$y, p, null_control)
# --------------- Get first and second derivatives
ltmt    <- chpDmat(mdl_h0, chp_control$msvar)
# --------------- calculate supTS and expTS test statistic
cv3     <- chpStat(mdl_h0, chp_control$rho_b, ltmt, chp_control$msvar)
supts   <- cv3[1]
expts   <- cv3[2]
if (is.finite(supts) & is.finite(expts)){
CHP_out <- list(supTS=supts,expTS=expts)
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',round(endT[3],3),',',CHP_out$supTS,',',CHP_out$expTS,',',supTS_levecorr_cv,',',expTS_levecorr_cv,',',
as.numeric(CHP_out$supTS>supTS_levecorr_cv),',',as.numeric(CHP_out$expTS>expTS_levecorr_cv))
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
supTS_levecorr_cv
expTS_levecorr_cv
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_res
# ============================================================================ #
# Author: Gabriel Rodriguez Rondon
# email: gabriel.rodriguezrondon@mail.mcgill.ca
# This version: 12-Apr-2023
#
# Notes:
# This script can be used to replicate simulation results for "Monte Carlo
# Likelihood Ratio Tests for Markov Switching Models" by Gabriel Rodriguez
# Rondon & Jean-Marie Dufour. It was prepared using v0.1.2
# of MSTest available through CRAN.
# ============================================================================ #
library(MSTest)
library(foreach)
library(doParallel)
setwd("/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/")
# ============================================================================ #
# ----- USE INPUT -----
# ============================================================================ #
seed <- 12345
# Optimization controls
N                 <- 500
Nsim              <- 1000
workers           <- 6
rho               <- 0.7
chp_control <- list(N = N,
rho_b = rho,
msvar = TRUE)
# Parameters of DGP (under null hypothesis)
k0          <- 1
k1          <- 2
ar_mdl_k1   <- list(k = k0, mu = 0, sigma = 1)
n_ls        <- c(200,500) #c(100,200,500)
phi_ls      <- c(0.1, 0.9, 1)
# ============================================================================ #
# -----  Parallel Loop -----
# ============================================================================ #
param_ls      <- list()
param_ls$n    <- n_ls
param_ls$phi  <- phi_ls
param_ls$k0   <- k0
param_ls$k1   <- k1
combined_list <- expand.grid(param_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cl <- makeCluster(workers)
registerDoParallel(cl)
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
ar_mdl_k1$n <- n
ar_mdl_k1$phi <- phi
p <- length(phi)
# ------------- File name and columns titles
file_name <-paste0('simulations/results/CHP_Boots_',N,'_rho_',sub('\\.','',rho),'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","supTS,","expTS,","supTS_Pvalue,","expTS_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
set.seed(seed + i + xi)
CHP_out <- NULL
attempt <- 0
startT <- proc.time()
while (is.null(CHP_out)) {
y_out <- MSTest::simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
CHP_out <- MSTest::CHPTest(y_out$y, p,control = chp_control)
)
if (is.null(CHP_out)==F){
if (is.na(CHP_out$pval_supTS) |is.na(CHP_out$pval_expTS)){
CHP_out <- NULL
}
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',round(endT[3],3),',',CHP_out$supTS,',',CHP_out$expTS,',',CHP_out$pval_supTS,',',CHP_out$pval_expTS)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
close.all()
sqrt(0.6)
sqrt(0.9)
library(MSTest)
fig_out   <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/empirical/figures/"
res_out   <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/empirical/results/"
data_loc  <- "/Users/gabrielrodriguez/Dropbox/Res/papers/MC_LRT_MSM/mc_lrt_msm/data/"
seed      <- 1234
p         <- 1
k1        <- 1
k2        <- 2
k3        <- 3
k4        <- 4
N         <- 99
workers   <- 9
burnin    <- 100
diff_init <- 10
mmc_eps   <- 0
mmc_CI    <- TRUE
mmc_maxit <- 50
ar_control                <- list(const = TRUE,
getSE = TRUE)
msar_control_msmu_msvar   <- list(msmu   = TRUE,
msvar  = TRUE,
method = "EM",
use_diff_init = diff_init,
getSE  = TRUE)
msar_control_msmu <- msar_control_msvar <- msar_control_msmu_msvar
msar_control_msmu$msvar <- FALSE
msar_control_msvar$msmu <- FALSE
# ============================================================================ #
# --------------------------------- DATA -------------------------------------
# ============================================================================ #
StartDate <- "1985-01-01"
EndDate_precov   <- "2019-10-01"
EndDate_poscov   <- "2022-10-01"
EndDate <- EndDate_poscov
# US Data
USgdp <- read.csv(paste0(data_loc,"US_GDP_19600401_20230701.csv"))
USip  <- read.csv(paste0(data_loc,"US_IP_19190401_20240101.csv"))
USgdp <- USgdp[which(USgdp[,1]==StartDate):which(USgdp[,1]==EndDate),3]
USip  <- USip[which(USip[,1]==StartDate):which(USip[,1]==EndDate),3]
# CA Data
CAgdp <- read.csv(paste0(data_loc,"CA_GDP_19610401_20230701.csv"))
CAip  <- read.csv(paste0(data_loc,"CA_IP_19610401_20231001.csv"))
CAgdp <- CAgdp[which(CAgdp[,1]==StartDate):which(CAgdp[,1]==EndDate),3]
CAip  <- CAip[which(CAip[,1]==StartDate):which(CAip[,1]==EndDate),3]
# UK Data
UKgdp <- read.csv(paste0(data_loc,"UK_GDP_19600401_20230701.csv"))
UKip  <- read.csv(paste0(data_loc,"UK_IP_19480401_20240101.csv"))
UKgdp <- UKgdp[which(UKgdp[,1]==StartDate):which(UKgdp[,1]==EndDate),3]
UKip  <- UKip[which(UKip[,1]==StartDate):which(UKip[,1]==EndDate),3]
# GR Data
GRgdp <- read.csv(paste0(data_loc,"GR_GDP_19700401_20230701.csv"))
GRip  <- read.csv(paste0(data_loc,"GR_IP_19580401_20240101.csv"))
GRgdp <- GRgdp[which(GRgdp[,1]==StartDate):which(GRgdp[,1]==EndDate),3]
GRip  <- GRip[which(GRip[,1]==StartDate):which(GRip[,1]==EndDate),3]
# Business Cycle Indicator
BCind <- read.csv(paste0(data_loc,"FRED_NBER_BC_Indicator_quarterly.csv"))
dates <- as.Date(BCind[which(BCind[,1]==StartDate):which(BCind[,1]==EndDate),1])
BCind <- as.matrix(BCind[which(BCind[,1]==StartDate):which(BCind[,1]==EndDate),2])
# Bi-variate Variables.
Y_US_CA_gdp <- cbind(USgdp,CAgdp)
Y_US_CA_ip  <- cbind(USip,CAip)
Y_US_UK_gdp <- cbind(USgdp,UKgdp)
Y_US_UK_ip  <- cbind(USip,UKip)
Y_US_GR_gdp <- cbind(USgdp,GRgdp)
Y_US_GR_ip  <- cbind(USip,GRip)
# ============================================================================ #
# ------------------------- ESTIMATION & TESTING -----------------------------
# ============================================================================ #
## ---------- Setting testing options ----------
lmc_1v2_control_msmu_msvar   <- list(N = N,
burnin = burnin,
workers = workers,
mdl_h0_control = ar_control,
mdl_h1_control = msar_control_msmu_msvar,
use_diff_init_sim = diff_init)
lmc_2v3_control_msmu_msvar   <- list(N = N,
burnin = burnin,
workers = workers,
mdl_h0_control = msar_control_msmu_msvar,
mdl_h1_control = msar_control_msmu_msvar,
use_diff_init_sim = diff_init)
mmc_1v2_control_msmu_msvar    <- list(N = N,
burnin = burnin,
workers = workers,
type = "pso",
eps = mmc_eps,
CI_union = mmc_CI,
mdl_h0_control = ar_control,
mdl_h1_control = msar_control_msmu_msvar,
use_diff_init_sim = diff_init,
maxit = mmc_maxit)
mmc_2v3_control_msmu_msvar    <- list(N = N,
burnin = burnin,
workers = workers,
type = "pso",
eps = mmc_eps,
CI_union = mmc_CI,
mdl_h0_control = msar_control_msmu_msvar,
mdl_h1_control = msar_control_msmu_msvar,
use_diff_init_sim = diff_init,
maxit = mmc_maxit)
lmc_2v4_control_msmu_msvar <- lmc_2v3_control_msmu_msvar
lmc_1v2_control_msmu <- lmc_1v2_control_msmu_msvar
lmc_2v3_control_msmu <- lmc_2v3_control_msmu_msvar
lmc_2v4_control_msmu <- lmc_2v4_control_msmu_msvar
lmc_1v2_control_msmu$mdl_h1_control$msvar <- FALSE
lmc_2v3_control_msmu$mdl_h0_control$msvar <-lmc_2v3_control_msmu$mdl_h1_control$msvar <- FALSE
lmc_2v4_control_msmu$mdl_h0_control$msvar <-lmc_2v4_control_msmu$mdl_h1_control$msvar <- FALSE
mmc_2v4_control_msmu_msvar <- mmc_2v3_control_msmu_msvar
mmc_1v2_control_msmu <- mmc_1v2_control_msmu_msvar
mmc_2v3_control_msmu <- mmc_2v3_control_msmu_msvar
mmc_2v4_control_msmu <- mmc_2v4_control_msmu_msvar
mmc_1v2_control_msmu$mdl_h1_control$msvar <- FALSE
mmc_2v3_control_msmu$mdl_h0_control$msvar <- mmc_2v3_control_msmu$mdl_h1_control$msvar <- FALSE
mmc_2v4_control_msmu$mdl_h0_control$msvar <- mmc_2v4_control_msmu$mdl_h1_control$msvar <- FALSE
### ----- H0: M=2 vs. H1: M=3 -----
# GDP
doParallel::registerDoParallel(cores = workers)
st <- proc.time()
dcheck <- FALSE
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp <- NULL
while (dcheck==F){
try(
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp <- LMCLRTest(Y_US_CA_gdp, p, k2, k3, Z = NULL, control = lmc_2v3_control_msmu_msvar)
)
if(is.null(US_CA_LMC_LRTout_2v3_msmu_msvar_gdp)==FALSE){
dcheck <- TRUE
}
}
end_usca_lmc_2v3_msmu_msvar_gdp <- proc.time() - st
doParallel::stopImplicitCluster()
end_usca_lmc_2v3_msmu_msvar_gdp[3]
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp$pval
doParallel::registerDoParallel(cores = workers)
st <- proc.time()
dcheck <- FALSE
US_CA_LMC_LRTout_2v3_msmu_gdp <- NULL
while (dcheck==F){
try(
US_CA_LMC_LRTout_2v3_msmu_gdp <- LMCLRTest(Y_US_CA_gdp, p, k2, k3, Z = NULL, control = lmc_2v3_control_msmu)
)
if(is.null(US_CA_LMC_LRTout_2v3_msmu_gdp)==FALSE){
dcheck <- TRUE
}
}
end_usca_lmc_2v3_msmu_gdp <- proc.time() - st
doParallel::stopImplicitCluster()
end_usca_lmc_2v3_msmu_gdp[3]
US_CA_LMC_LRTout_2v3_msmu_gdp$pval
lmc_2v3_control_msmu$N
lmc_2v3_control_msmu$N <- 299
lmc_2v3_control_msmu_msvar$N <- 299
### ----- H0: M=2 vs. H1: M=3 -----
# GDP
doParallel::registerDoParallel(cores = workers)
st <- proc.time()
dcheck <- FALSE
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp <- NULL
while (dcheck==F){
try(
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp <- LMCLRTest(Y_US_CA_gdp, p, k2, k3, Z = NULL, control = lmc_2v3_control_msmu_msvar)
)
if(is.null(US_CA_LMC_LRTout_2v3_msmu_msvar_gdp)==FALSE){
dcheck <- TRUE
}
}
end_usca_lmc_2v3_msmu_msvar_gdp <- proc.time() - st
doParallel::stopImplicitCluster()
end_usca_lmc_2v3_msmu_msvar_gdp[3]
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp$pval
doParallel::registerDoParallel(cores = workers)
st <- proc.time()
dcheck <- FALSE
US_CA_LMC_LRTout_2v3_msmu_gdp <- NULL
while (dcheck==F){
try(
US_CA_LMC_LRTout_2v3_msmu_gdp <- LMCLRTest(Y_US_CA_gdp, p, k2, k3, Z = NULL, control = lmc_2v3_control_msmu)
)
if(is.null(US_CA_LMC_LRTout_2v3_msmu_gdp)==FALSE){
dcheck <- TRUE
}
}
end_usca_lmc_2v3_msmu_gdp <- proc.time() - st
doParallel::stopImplicitCluster()
end_usca_lmc_2v3_msmu_gdp[3]
US_CA_LMC_LRTout_2v3_msmu_gdp$pval
lmc_2v3_control_msmu$N <- 999
lmc_2v3_control_msmu_msvar$N <- 999
### ----- H0: M=2 vs. H1: M=3 -----
# GDP
doParallel::registerDoParallel(cores = workers)
st <- proc.time()
dcheck <- FALSE
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp <- NULL
while (dcheck==F){
try(
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp <- LMCLRTest(Y_US_CA_gdp, p, k2, k3, Z = NULL, control = lmc_2v3_control_msmu_msvar)
)
if(is.null(US_CA_LMC_LRTout_2v3_msmu_msvar_gdp)==FALSE){
dcheck <- TRUE
}
}
end_usca_lmc_2v3_msmu_msvar_gdp <- proc.time() - st
doParallel::stopImplicitCluster()
end_usca_lmc_2v3_msmu_msvar_gdp[3]
US_CA_LMC_LRTout_2v3_msmu_msvar_gdp$pval
doParallel::registerDoParallel(cores = workers)
st <- proc.time()
dcheck <- FALSE
US_CA_LMC_LRTout_2v3_msmu_gdp <- NULL
while (dcheck==F){
try(
US_CA_LMC_LRTout_2v3_msmu_gdp <- LMCLRTest(Y_US_CA_gdp, p, k2, k3, Z = NULL, control = lmc_2v3_control_msmu)
)
if(is.null(US_CA_LMC_LRTout_2v3_msmu_gdp)==FALSE){
dcheck <- TRUE
}
}
end_usca_lmc_2v3_msmu_gdp <- proc.time() - st
doParallel::stopImplicitCluster()
end_usca_lmc_2v3_msmu_gdp[3]
US_CA_LMC_LRTout_2v3_msmu_gdp$pval
