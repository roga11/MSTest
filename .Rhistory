#setwd("/home/rodrigug/mc_ms_test/test_res")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
workers <-11
N <- 99
Nsim <- 500
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
finite_max_init = 100,
init_val_try = 25,
init_val_try_dist = 10,
dist_converge_iter = 1,
workers=workers)
# ====================================================================
# ====== Params
# ====================================================================
ar <- 1
n_ls <-  c(500)
mu_ls <- c(0,2)
stdev_ls <- c(1,2)
phi_ls <- c(0.1)
P2233_ls <- c(0.90)
ls <- list()
ls$n <- n_ls
ls$phi <- phi_ls
ls$mu_ls <- mu_ls
ls$stdev_ls <- stdev_ls
ls$P22_ls <-P2233_ls
combined_list <- expand.grid(ls)
combined_list["mu_1"] = 0
combined_list["stdev_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["stdev_ls"]==1) + (combined_list["stdev_1"]==1))!=4,]
# add third state mean and variance.
combined_list["mu_3"] = 0
combined_list["stdev_3"] = 1
combined_list["mu_3"][combined_list["mu_ls"]==2]=-2
combined_list["stdev_3"][combined_list["stdev_ls"]==2]=3
row.names(combined_list) <- NULL
# ---------------------------------------
# Power of Test H0: k=2 vs. H1: k=3
# ---------------------------------------
k1 <- 3
k0 <- 2
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k3 <- list()
ar_mdl_k3[["ar"]] <- ar
ar_mdl_k3[["k"]] <- k1
print(combined_list)
for (i in 1:nrow(combined_list)){
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
mu_3 <- combined_list[i,8]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
stdev_3 <- combined_list[i,9]
p2233 <- combined_list[i,5]
# ------------- Model
ar_mdl_k3[["n"]] <- n
ar_mdl_k3[["phi"]] <- phi
ar_mdl_k3[["mu"]] <- c(mu_3,mu_1,mu_2)
ar_mdl_k3[["stdev"]] <- c(stdev_1,stdev_2,stdev_3)
ar_mdl_k3[["P"]] <- cbind(c(0.9,0.05,0.05),c((1-p2233)/2,p2233,(1-p2233)/2),c((1-p2233)/2,(1-p2233)/2,p2233))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
# ------------- File name and columns titles
file_name <-paste0('LMC_LRT_simulation_',N,'_results_power_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,'_p22_',sub('\\.','',p2233),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","LMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
# ------------- Set up clusters
cl <- makeCluster(workers)
registerDoParallel(cl)
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuMSAR(ar_mdl_k3, type="markov")
# only try if the simulated model actually has 3 regimes (duration isn't taken into account)
# since we have 3 regimes and low sample sizes of 100 and 200, this is used to make sure that
# process simulated under the alternative actually has features of the alternative (i.e. 3 regimes)
if (max(y_out$St)==(k1-1)){
attempt <- attempt + 1
try(
LRTest_out <- MCLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
stopCluster(cl)
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
stopCluster(cl)
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_other")
# ----- windows
#setwd("C:/Users/ghrod/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_other")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test_res")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test_res")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
workers <-11
N <- 99
Nsim <- 100
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
finite_max_init = 100,
init_val_try = 25,
init_val_try_dist = 10,
dist_converge_iter = 1,
workers=workers)
# ====================================================================
# ====== Params
# ====================================================================
ar <- 1
n_ls <-  c(500)
mu_ls <- c(0,2)
stdev_ls <- c(1,2)
phi_ls <- c(0.1)
P2233_ls <- c(0.90)
ls <- list()
ls$n <- n_ls
ls$phi <- phi_ls
ls$mu_ls <- mu_ls
ls$stdev_ls <- stdev_ls
ls$P22_ls <-P2233_ls
combined_list <- expand.grid(ls)
combined_list["mu_1"] = 0
combined_list["stdev_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["stdev_ls"]==1) + (combined_list["stdev_1"]==1))!=4,]
# add third state mean and variance.
combined_list["mu_3"] = 0
combined_list["stdev_3"] = 1
combined_list["mu_3"][combined_list["mu_ls"]==2]=-2
combined_list["stdev_3"][combined_list["stdev_ls"]==2]=3
row.names(combined_list) <- NULL
# ---------------------------------------
# Power of Test H0: k=2 vs. H1: k=3
# ---------------------------------------
k1 <- 3
k0 <- 2
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k3 <- list()
ar_mdl_k3[["ar"]] <- ar
ar_mdl_k3[["k"]] <- k1
print(combined_list)
for (i in 1:nrow(combined_list)){
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
mu_3 <- combined_list[i,8]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
stdev_3 <- combined_list[i,9]
p2233 <- combined_list[i,5]
# ------------- Model
ar_mdl_k3[["n"]] <- n
ar_mdl_k3[["phi"]] <- phi
ar_mdl_k3[["mu"]] <- c(mu_3,mu_1,mu_2)
ar_mdl_k3[["stdev"]] <- c(stdev_1,stdev_2,stdev_3)
ar_mdl_k3[["P"]] <- cbind(c(0.9,0.05,0.05),c((1-p2233)/2,p2233,(1-p2233)/2),c((1-p2233)/2,(1-p2233)/2,p2233))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
# ------------- File name and columns titles
file_name <-paste0('LMC_LRT_simulation_',N,'_results_power_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,'_p22_',sub('\\.','',p2233),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","LMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
# ------------- Set up clusters
cl <- makeCluster(workers)
registerDoParallel(cl)
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuMSAR(ar_mdl_k3, type="markov")
# only try if the simulated model actually has 3 regimes (duration isn't taken into account)
# since we have 3 regimes and low sample sizes of 100 and 200, this is used to make sure that
# process simulated under the alternative actually has features of the alternative (i.e. 3 regimes)
if (max(y_out$St)==(k1-1)){
attempt <- attempt + 1
try(
LRTest_out <- MCLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
stopCluster(cl)
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
workers
N_worker_i <- matrix(rep(floor(N/workers),workers),workers,1)
N_worker_i
N_worker_i[1:(N-floor(N/workers)*(workers))] <- N_worker_i[1:(N-floor(N/workers)*(workers))] +1
N_worker_i
N_worker_i <- matrix(rep(floor(N/workers),workers),workers,1)
N_worker_i
(N-floor(N/workers)*(workers))
sum(N_worker_i)
(sum(N_worker_i)<N)
setwd('/Users/grodriguezrondon/Documents/Res/structbreak/MSTest_rpack_v2/MSTest')
library(MSTest)
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_other")
# ----- windows
#setwd("C:/Users/ghrod/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_other")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test_res")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test_res")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
workers <- 11
N <- 99
Nsim <- 100
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
finite_max_init = 100,
init_val_try = 25,
init_val_try_dist = 10,
dist_converge_iter = 1,
workers=workers)
# ====================================================================
# ====== Params
# ====================================================================
ar <- 1
n_ls <-  c(500)
mu_ls <- c(0,2)
stdev_ls <- c(1,2)
phi_ls <- c(0.1)
P2233_ls <- c(0.90)
ls <- list()
ls$n <- n_ls
ls$phi <- phi_ls
ls$mu_ls <- mu_ls
ls$stdev_ls <- stdev_ls
ls$P22_ls <-P2233_ls
combined_list <- expand.grid(ls)
combined_list["mu_1"] = 0
combined_list["stdev_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["stdev_ls"]==1) + (combined_list["stdev_1"]==1))!=4,]
# add third state mean and variance.
combined_list["mu_3"] = 0
combined_list["stdev_3"] = 1
combined_list["mu_3"][combined_list["mu_ls"]==2]=-2
combined_list["stdev_3"][combined_list["stdev_ls"]==2]=3
row.names(combined_list) <- NULL
# ---------------------------------------
# Power of Test H0: k=2 vs. H1: k=3
# ---------------------------------------
k1 <- 3
k0 <- 2
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k3 <- list()
ar_mdl_k3[["ar"]] <- ar
ar_mdl_k3[["k"]] <- k1
print(combined_list)
for (i in 1:nrow(combined_list)){
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
mu_3 <- combined_list[i,8]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
stdev_3 <- combined_list[i,9]
p2233 <- combined_list[i,5]
# ------------- Model
ar_mdl_k3[["n"]] <- n
ar_mdl_k3[["phi"]] <- phi
ar_mdl_k3[["mu"]] <- c(mu_3,mu_1,mu_2)
ar_mdl_k3[["stdev"]] <- c(stdev_1,stdev_2,stdev_3)
ar_mdl_k3[["P"]] <- cbind(c(0.9,0.05,0.05),c((1-p2233)/2,p2233,(1-p2233)/2),c((1-p2233)/2,(1-p2233)/2,p2233))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
# ------------- File name and columns titles
file_name <-paste0('LMC_LRT_simulation_',N,'_results_power_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,'_p22_',sub('\\.','',p2233),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","LMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
# ------------- Set up clusters
cl <- makeCluster(workers)
registerDoParallel(cl)
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuMSAR(ar_mdl_k3, type="markov")
# only try if the simulated model actually has 3 regimes (duration isn't taken into account)
# since we have 3 regimes and low sample sizes of 100 and 200, this is used to make sure that
# process simulated under the alternative actually has features of the alternative (i.e. 3 regimes)
if (max(y_out$St)==(k1-1)){
attempt <- attempt + 1
try(
LRTest_out <- MCLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
stopCluster(cl)
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_other")
# ----- windows
#setwd("C:/Users/ghrod/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_other")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test_res")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test_res")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
workers <- 11
N <- 99
Nsim <- 100
control <- list(N = N,
maxit = 1000,
thtol = 1e-6,
finite_max_init = 100,
init_val_try = 30,
init_val_try_dist = 30,
dist_converge_iter = 1,
workers=workers)
# ====================================================================
# ====== Params
# ====================================================================
ar <- 1
n_ls <-  c(500)
mu_ls <- c(0,2)
stdev_ls <- c(1,2)
phi_ls <- c(0.1)
P2233_ls <- c(0.90)
ls <- list()
ls$n <- n_ls
ls$phi <- phi_ls
ls$mu_ls <- mu_ls
ls$stdev_ls <- stdev_ls
ls$P22_ls <-P2233_ls
combined_list <- expand.grid(ls)
combined_list["mu_1"] = 0
combined_list["stdev_1"] = 1
combined_list <- combined_list[((combined_list["mu_ls"]==0) + (combined_list["mu_1"]==0) + (combined_list["stdev_ls"]==1) + (combined_list["stdev_1"]==1))!=4,]
# add third state mean and variance.
combined_list["mu_3"] = 0
combined_list["stdev_3"] = 1
combined_list["mu_3"][combined_list["mu_ls"]==2]=-2
combined_list["stdev_3"][combined_list["stdev_ls"]==2]=3
row.names(combined_list) <- NULL
# ---------------------------------------
# Power of Test H0: k=2 vs. H1: k=3
# ---------------------------------------
k1 <- 3
k0 <- 2
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k3 <- list()
ar_mdl_k3[["ar"]] <- ar
ar_mdl_k3[["k"]] <- k1
print(combined_list)
start = 3
for (i in start:nrow(combined_list)){
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
mu_1 <- combined_list[i,6]
mu_2 <- combined_list[i,3]
mu_3 <- combined_list[i,8]
stdev_1 <- combined_list[i,7]
stdev_2 <- combined_list[i,4]
stdev_3 <- combined_list[i,9]
p2233 <- combined_list[i,5]
# ------------- Model
ar_mdl_k3[["n"]] <- n
ar_mdl_k3[["phi"]] <- phi
ar_mdl_k3[["mu"]] <- c(mu_3,mu_1,mu_2)
ar_mdl_k3[["stdev"]] <- c(stdev_1,stdev_2,stdev_3)
ar_mdl_k3[["P"]] <- cbind(c(0.9,0.05,0.05),c((1-p2233)/2,p2233,(1-p2233)/2),c((1-p2233)/2,(1-p2233)/2,p2233))
msmu <- mu_1!=mu_2
msvar <- stdev_1!=stdev_2
# ------------- File name and columns titles
file_name <-paste0('LMC_LRT_simulation_',N,'_results_power_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_changeMean_',msmu,'_changeVar_',msvar,
'_p22_',sub('\\.','',p2233),'_inittry_',control$init_val_try,'_inittrydist_',control$init_val_try_dist,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","LMC_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
# ------------- Set up clusters
cl <- makeCluster(workers)
registerDoParallel(cl)
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuMSAR(ar_mdl_k3, type="markov")
# only try if the simulated model actually has 3 regimes (duration isn't taken into account)
# since we have 3 regimes and low sample sizes of 100 and 200, this is used to make sure that
# process simulated under the alternative actually has features of the alternative (i.e. 3 regimes)
if (max(y_out$St)==(k1-1)){
attempt <- attempt + 1
try(
LRTest_out <- MCLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
stopCluster(cl)
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
