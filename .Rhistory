type <- as.character(combined_list[i,5])
if (phi==1){
control$stationary_ind  <- FALSE
}
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('MMC_DLMomentTest_',type,'_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","DLMMC_MomentTest_Pvalue_",type)
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
DLMMCTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(DLMMCTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
DLMMCTest_out <- DLMMCTest(y_out$y, ar, type, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',DLMMCTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
library(foreach)
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_test")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test")
# ====================================================================
# ====== Optimization Controls
# ====================================================================
N <- 99
Nsim <- 1000
type_ls = c("min","prod")
control <- list(N = N,
simdist_N = 10000,
getSE = TRUE,
eps = 0.05,
CI_union = TRUE,
lambda = 100,
stationary_ind = TRUE, #unless phi=1 (see below)
type = "pso",
silence = FALSE,
threshold_stop = 0.05000001, # optimization will stop if test fails to reject (i.e. search until we fail to reject)
type_control = list(maxit = 200))
# ====================================================================
# ====== Params
# ====================================================================
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- 2
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k1 <- list()
ar_mdl_k1[["mu"]] <- mu
ar_mdl_k1[["stdev"]] <- stdev
ar_mdl_k1[["ar"]] <- ar
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
nphi_ls$type <- type_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cores=detectCores()
#cl <- makeCluster(min(c(cores[1]-2,nrow(combined_list))))
cl <- makeCluster(12)
registerDoParallel(cl)
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list)) %dopar% {
# ------------- load functions in environment
library(MSTest)
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
type <- as.character(combined_list[i,5])
if (phi==1){
control$stationary_ind  <- FALSE
}
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('MMC_DLMomentTest_',type,'_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","DLMMC_MomentTest_Pvalue_",type)
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
DLMMCTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(DLMMCTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
DLMMCTest_out <- DLMMCTest(y_out$y, ar, type, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',DLMMCTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
cores=detectCores()
library(foreach)
library(doParallel)
library(MSTest)
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_test")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test")
# ====================================================================
# ====== Optimization Controls
# ====================================================================
N <- 99
Nsim <- 1000
type_ls = c("min","prod")
control <- list(N = N,
simdist_N = 10000,
getSE = TRUE,
eps = 0.05,
CI_union = TRUE,
lambda = 100,
stationary_ind = TRUE, #unless phi=1 (see below)
type = "pso",
silence = FALSE,
threshold_stop = 0.05000001, # optimization will stop if test fails to reject (i.e. search until we fail to reject)
type_control = list(maxit = 200))
# ====================================================================
# ====== Params
# ====================================================================
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- 2
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k1 <- list()
ar_mdl_k1[["mu"]] <- mu
ar_mdl_k1[["stdev"]] <- stdev
ar_mdl_k1[["ar"]] <- ar
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
nphi_ls$type <- type_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cores=detectCores()
#cl <- makeCluster(min(c(cores[1]-2,nrow(combined_list))))
cl <- makeCluster(12)
registerDoParallel(cl)
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list)) %dopar% {
# ------------- load functions in environment
library(MSTest)
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
type <- as.character(combined_list[i,5])
if (phi==1){
control$stationary_ind  <- FALSE
}
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('MMC_DLMomentTest_',type,'_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","DLMMC_MomentTest_Pvalue_",type)
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
DLMMCTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(DLMMCTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
DLMMCTest_out <- DLMMCTest(y_out$y, ar, type, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',DLMMCTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
cl <- parallel::makeCluster(12)
doParallel::registerDoParallel(cl)
finalMatrix <- foreach(i=1:nrow(combined_list)) %dopar% {
# ------------- load functions in environment
library(MSTest)
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
type <- as.character(combined_list[i,5])
if (phi==1){
control$stationary_ind  <- FALSE
}
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('MMC_DLMomentTest_',type,'_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","DLMMC_MomentTest_Pvalue_",type)
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
DLMMCTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(DLMMCTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
DLMMCTest_out <- DLMMCTest(y_out$y, ar, type, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',DLMMCTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
parallel::stopCluster(cl)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(12)
doParallel::registerDoParallel(cl)
`%dopar%` <- foreach::`%dopar%`
finalMatrix <- foreach(i=1:nrow(combined_list), .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
type <- as.character(combined_list[i,5])
if (phi==1){
control$stationary_ind  <- FALSE
}
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('MMC_DLMomentTest_',type,'_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","DLMMC_MomentTest_Pvalue_",type)
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
DLMMCTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(DLMMCTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
DLMMCTest_out <- DLMMCTest(y_out$y, ar, type, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',DLMMCTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
parallel::stopCluster(cl)
cl <- parallel::makeCluster(12)
doParallel::registerDoParallel(cl)
`%dopar%` <- foreach::`%dopar%`
finalMatrix <- foreach::foreach(i=1:nrow(combined_list), .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
type <- as.character(combined_list[i,5])
if (phi==1){
control$stationary_ind  <- FALSE
}
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('MMC_DLMomentTest_',type,'_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","DLMMC_MomentTest_Pvalue_",type)
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
DLMMCTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(DLMMCTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
DLMMCTest_out <- DLMMCTest(y_out$y, ar, type, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',DLMMCTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
parallel::stopCluster(cl)
finalMatrix
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files")
# ====================================================================
# ====== TABLE 1: Size of Test H0: k=1 vs. H1: k=2
# ====================================================================
alpha <- 0.05
k1_ls <- 2
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# --------------------------------------------------------------------
# ----- Parameters for Loop
# --------------------------------------------------------------------
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# list for grid
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# --------------------------------------------------------------------
# ----- Create Table
# --------------------------------------------------------------------
# matrix
table1 <- matrix(0,6,nrow(combined_list))
colnames(table1) <- paste0('T=',as.character(combined_list[,1]),', phi=',as.character(combined_list[,2]))
rownames(table1) <- c('LMC-LRT', 'MMC-LRT', 'LMC-DL_min','LMC-DL_prod', 'MMC-DL_min','MMC-DL_prod')
# loop over files
for (i in 1:nrow(combined_list)){
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- File name and columns titles
file_name_LMC_LRT <-paste0('LMC_LRT_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
file_name_LMC_DL <-paste0('LMC_DLMomentTest_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
file_name_MMC_DL_min <-paste0('MMC_DLMomentTest_min_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
file_name_MMC_DL_prod <-paste0('MMC_DLMomentTest_prod_simulation_',N,'_results_size_of_test_h0_',k0,'_h1_',k1,
'_n_',n,'_phi_',sub('\\.','',phi),'_threshold_',sub('\\.','',round(control$threshold_stop,2)),
'_maxiter_',control$type_control$maxit,'.txt')
# ------------- Read files
LMC_LRT_sim_res <- read.table(file_name_LMC_LRT, header = TRUE, sep = ",")
LMC_DL_sim_res <- read.table(file_name_LMC_DL, header = TRUE, sep = ",")
MMC_DL_min_sim_res <- read.table(file_name_MMC_DL_min, header = TRUE, sep = ",")
MMC_DL_prod_sim_res <- read.table(file_name_MMC_DL_prod, header = TRUE, sep = ",")
# ------------- Fill matrix
table1[1,i] <- (sum(LMC_LRT_sim_res$LMC_LRT_Pvalue<=alpha)/
length(LMC_LRT_sim_res$LMC_LRT_Pvalue))*100
table1[3,i] <- (sum(LMC_DL_sim_res$DLMC_MomentTest_Pvalue_Min<=alpha)/
length(LMC_DL_sim_res$DLMC_MomentTest_Pvalue_Min))*100
table1[4,i] <- (sum(LMC_DL_sim_res$DLMC_MomentTest_Pvalue_Prod<=alpha)/
length(LMC_DL_sim_res$DLMC_MomentTest_Pvalue_Prod))*100
table1[5,i] <- (sum(MMC_DL_min_sim_res$DLMMC_MomentTest_Pvalue_min<=alpha)/
length(MMC_DL_min_sim_res$DLMMC_MomentTest_Pvalue_min))*100
table1[6,i] <- (sum(MMC_DL_prod_sim_res$DLMMC_MomentTest_Pvalue_prod<=alpha)/
length(MMC_DL_prod_sim_res$DLMMC_MomentTest_Pvalue_prod))*100
}
print(table1)
