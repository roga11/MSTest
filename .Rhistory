combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
combined_list
i=1
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- LR_BootTest(y_out$y, ar, k0, k1, msmu, msvar, N = B, maxit = 300, thtol = 1e-6)
)
}
endT <- proc.time()-startT
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
library(MSTest)
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
library(MSTest)
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
LRTest_out$pval
endT
endT[3]/60
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_test")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
B <- 1000
Nsim <- 1000
control <- list(B = B,
maxit = 300,
thtol = 1e-6)
# ====================================================================
# ====== Params
# ====================================================================
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- c(2,3)
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k1 <- list()
ar_mdl_k1[["mu"]] <- mu
ar_mdl_k1[["stdev"]] <- stdev
ar_mdl_k1[["ar"]] <- ar
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cores=detectCores()
#cl <- makeCluster(min(c(cores[1]-2,nrow(combined_list))))
cl <- makeCluster(12)
registerDoParallel()
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('Bootstrap_LRT_simulation_',B,'_results_size_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","Boot_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
combined_list
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_test")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
B <- 1000
Nsim <- 1000
control <- list(B = B,
maxit = 300,
thtol = 1e-6)
# ====================================================================
# ====== Params
# ====================================================================
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- c(2,3)
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k1 <- list()
ar_mdl_k1[["mu"]] <- mu
ar_mdl_k1[["stdev"]] <- stdev
ar_mdl_k1[["ar"]] <- ar
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cores=detectCores()
#cl <- makeCluster(min(c(cores[1]-2,nrow(combined_list))))
cl <- makeCluster(12)
registerDoParallel()
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('Bootstrap_LRT_simulation_',B,'_results_size_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","Boot_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
i=9
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
n
phi
k0
k1
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
file_name <-paste0('Bootstrap_LRT_simulation_',B,'_results_size_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
file_name
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_test")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
B <- 1000
Nsim <- 1000
control <- list(B = B,
maxit = 300,
thtol = 1e-6)
# ====================================================================
# ====== Params
# ====================================================================
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- c(2,3)
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k1 <- list()
ar_mdl_k1[["mu"]] <- mu
ar_mdl_k1[["stdev"]] <- stdev
ar_mdl_k1[["ar"]] <- ar
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cores=detectCores()
#cl <- makeCluster(min(c(cores[1]-2,nrow(combined_list))))
cl <- makeCluster(12)
registerDoParallel()
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('Bootstrap_LRT_simulation_',B,'_results_size_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","Boot_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
nrow(combined_list)
getwd()
cores=detectCores()
cores
cl <- makeCluster(12)
registerDoParallel(cl)
# ====================================================================
# ====== Dependencies
# ====================================================================
library(MSTest)
library(foreach)
library(doParallel)
# ====================================================================
# ====== Set Directory for results
# ====================================================================
# ----- macbook
setwd("/Users/grodriguezrondon/Dropbox/Res/structural_break/MC_LRT/mc_simu/res_files_test")
# ----- linux servers (verdi)
#setwd("/home/gabriel/mc_ms_test/test")
# ----- linux servers (Cirano)
#setwd("/home/rodrigug/mc_ms_test/test")
# ====================================================================
# ====== Optimization Controls
# ====================================s===============================
B <- 1000
Nsim <- 1000
control <- list(B = B,
maxit = 300,
thtol = 1e-6)
# ====================================================================
# ====== Params
# ====================================================================
mu <- 0
stdev <- 1
ar <- 1
n_ls <- c(100,200) #,500)
phi_ls <- c(0.1, 0.9, 1)
# ---------------------------------------
# Size of Test H0: k=1 vs. H1: k=2
# ---------------------------------------
k1_ls <- c(2,3)
k0_ls <- 1
msmu <- TRUE
msvar <- TRUE
# ====================================================================
# ====== Model
# ====================================================================
ar_mdl_k1 <- list()
ar_mdl_k1[["mu"]] <- mu
ar_mdl_k1[["stdev"]] <- stdev
ar_mdl_k1[["ar"]] <- ar
# ====================================================================
# ====== Parallel Loop
# ====================================================================
nphi_ls <- list()
nphi_ls$n <- n_ls
nphi_ls$phi <- phi_ls
nphi_ls$k0 <- k0_ls
nphi_ls$k1 <- k1_ls
combined_list <- expand.grid(nphi_ls)
combined_list <- combined_list[combined_list[,3]!=combined_list[,4],]
rownames(combined_list) <-NULL
# ------------- Set up clusters
cores=detectCores()
#cl <- makeCluster(min(c(cores[1]-2,nrow(combined_list))))
cl <- makeCluster(12)
registerDoParallel(cl)
# ------------- Set Seed
finalMatrix <- foreach(i=1:nrow(combined_list), .inorder = FALSE, .packages = "MSTest") %dopar% {
# ------------- parameter values for this loop
n <- combined_list[i,1]
phi <- combined_list[i,2]
k0 <- combined_list[i,3]
k1 <- combined_list[i,4]
# ------------- Model
ar_mdl_k1[["n"]] <- n
ar_mdl_k1[["phi"]] <- phi
# ------------- File name and columns titles
file_name <-paste0('Bootstrap_LRT_simulation_',B,'_results_size_of_test_h0_',k0,'_h1_',k1,'_n_',n,'_phi_',sub('\\.','',phi),'.txt')
res_line <- paste0("Iteration,","Attempts,","TimeSpent,","Boot_LRT_Pvalue")
if (file.exists(file_name)){
sim_res <- read.table(file_name, header = TRUE, sep = ",")
sim_start <- length(sim_res[,1]) + 1
}else{
write(res_line,file = file_name, append=TRUE)
sim_start <- 1
}
# ------------- Begin looping
if (sim_start<Nsim){
for (xi in sim_start:Nsim){
LRTest_out <- NULL
attempt <- 0
startT <- proc.time()
while(is.null(LRTest_out)) {
y_out <- simuAR(ar_mdl_k1)
attempt <- attempt + 1
try(
LRTest_out <- BootLRTest(y_out$y, ar, k0, k1, msmu, msvar, control = control)
)
}
endT <- proc.time()-startT
# ------------- Save results
res_line <- paste0(xi,',',attempt,',',endT[3],',',LRTest_out$pval)
write(res_line, file = file_name, append = TRUE)
}
}else{
print(paste0('Specified file already contains ', Nsim,' simulations. Process is complete.'))
}
}
#stop cluster
stopCluster(cl)
