pval      <- -mmc_out$value
pval
type_control = list(maxit = 200)
type_control = list(maxit = 2000)
type_control = list(maxit = 1000)
con$silence
con$silence==FALSE
con$type_control$verbose <- con$silence==FALSE
con$type_control$verbose
con$type_control$trace.mat <- TRUE
con$type_control$threshold.stop <- -con$threshold_stop
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
theta
theta_0
theta_upp
theta_low
theta_low < theta_0
theta_0
devtools:documnent()
devtools::documnent()
devtools::document()
library(MSTest)
con$variance_constraint
con$variance_constraint = 0.01
theta_low[sigma_ind==1][theta_low[sigma_ind==1]<=0]
sigma_ind <- c(mdl_h0$theta_var_ind,mdl_h1$theta_var_ind)
sigma_ind
theta_low[sigma_ind==1][theta_low[sigma_ind==1]<=0]
sigma_ind
theta_low
sigma_ind
theta_low < theta_0
theta_0
theta_low
k0 <- mdl_h0$k
k1 <- mdl_h1$k
# ----- Define lower & upper bounds for search
theta_low = theta_0 - con$eps
theta_upp = theta_0 + con$eps
con$eps
if ((con$CI_union==TRUE) & all(is.finite(mdl_h0$theta_se)) & all(is.finite(mdl_h1$theta_se))){
theta_low <- apply(cbind(as.matrix(theta_0 - 2*c(mdl_h0$theta_se,mdl_h1$theta_se)),as.matrix(theta_low)), 1, FUN = min)
theta_upp <- apply(cbind(as.matrix(theta_0 + 2*c(mdl_h0$theta_se,mdl_h1$theta_se)),as.matrix(theta_upp)), 1, FUN = max)
}
theta_low
sigma_ind <- c(mdl_h0$theta_var_ind,mdl_h1$theta_var_ind)
sigma_ind
theta_low[sigma_ind==1][theta_low[sigma_ind==1]<=0]
find([theta_low[sigma_ind==1]<=0])
which([theta_low[sigma_ind==1]<=0])
which([theta_low[sigma_ind==1]<=0])
[theta_low[sigma_ind==1]<=0]
theta_low[sigma_ind==1]<=0
which(theta_low[sigma_ind==1]<=0)
neg_loc <- which(theta_low[sigma_ind==1]<=0)
theta_lowtheta_low[sigma_ind==1][neg_loc]
theta_low[sigma_ind==1][neg_loc]
theta_0[sigma_ind==1][neg_loc]
theta_0[sigma_ind==1][neg_loc]*con$variance_constraint
sigma_ind <- c(mdl_h0$theta_var_ind,mdl_h1$theta_var_ind)
sigma_ind
which(theta_low[sigma_ind==1]<=0)
theta_low[sigma_ind==1]<=0
any(theta_low[sigma_ind==1]<=0)
library(MSTest)
mmc_bounds <- MMC_bounds(theta_0, mdl_h0, mdl_h1, con)
theta_low <- mmc_bounds$theta_low
theta_upp <- mmc_bounds$theta_upp
theta_low< theta_0
theta_upp > theta_0
theta_upp
theta_0
theta_upp - theta_0
theta_upp[10] - theta_0[10]
theta_upp >= theta_0
type_control = list(maxit = 200)
con$type_control$trace.stats <- TRUE
con$type_control$trace <- as.numeric(con$silence==FALSE)
con$type_control$abstol <- -con$threshold_stop
library(MSTest)
con$type_control$trace.stats <- TRUE
con$type_control$trace <- as.numeric(con$silence==FALSE)
con$type_control$abstol <- -con$threshold_stop
# begin optimization
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- pso::psoptim(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
gr = NULL, control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
type_control = list(maxit = 200)
con$type_control$trace.mat <- TRUE
con$type_control$verbose <- con$silence==FALSE
con$type_control$threshold.stop <- -con$threshold_stop
# begin optimization
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
mmc_out   <- GenSA::GenSA(par = theta_0, fn = MMCLRpval_fun_min, lower = theta_low, upper = theta_upp,
control = con$type_control,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control)
theta     <- mmc_out$par
pval      <- -mmc_out$value
pval
type_control = list(maxit = 200)
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
mmc_out   <- GA::ga(type = "real-valued", fitness = MMCLRpval_fun,
mdl_h0 = mdl_h0, mdl_h1 = mdl_h1, N = con$N, burnin = con$burnin, workers = con$workers,
lambda = con$lambda, stationary_constraint = con$stationary_constraint,
thtol = mdl_h1$control$thtol, mdl_h0_control = con$mdl_h0_control,
mdl_h1_control = con$mdl_h1_control,
lower = theta_low, upper = theta_upp,
maxiter = con$type_control$maxit, maxFitness = con$threshold_stop,
monitor = (con$silence==FALSE), suggestions = t(theta_0))
theta     <- as.matrix(mmc_out@solution[1,])
pval      <- mmc_out@fitnessValue
pval
theta_h0_length = length(mdl_h0[["theta"]])
theta_h1_length = length(mdl_h1[["theta"]])
theta
theta[1:theta_h0_length]
theta[(length(mdl_h0[["theta"]])+1):length(theta)]
if ((k0==1) & (p==0)){
# Nmdl under null & HMmdl under alternative hypothesis
logL0 = logLike_Nmdl(theta_h0, mdl_h0);
logL1 = logLike_HMmdl(theta_h1, mdl_h1, k1);
}else if ((k0>1) & (p==0)){
# HMmdl under null & alternative hypothesis
logL0 = logLike_HMmdl(theta_h0, mdl_h0, k0);
logL1 = logLike_HMmdl(theta_h1, mdl_h1, k1);
}else if ((k0==1) & (q==1) & (p>0)){
# ARmdl under null & MSARmdl under alternative hypothesis
logL0 = logLike_ARmdl(theta_h0, mdl_h0);
logL1 = logLike_MSARmdl(theta_h1, mdl_h1, k1);
}else if ((k0>1) & (q==1) & (p>0)){
# MSARmdl under null & alternative hypothesis
logL0 = logLike_MSARmdl(theta_h0, mdl_h0, k0);
logL1 = logLike_MSARmdl(theta_h1, mdl_h1, k1);
}else if ((k0==1) & (q>1) & (p>0)){
# VARmdl under null & MSVARmdl under alternative hypothesis
logL0 = logLike_VARmdl(theta_h0, mdl_h0);
logL1 = logLike_MSVARmdl(theta_h1, mdl_h1, k1);
}else if ((k0>1) & (q>1) & (p>0)){
# MSARmdl under null & alternative hypothesis
logL0 = logLike_MSVARmdl(theta_h0, mdl_h0, k0);
logL1 = logLike_MSVARmdl(theta_h1, mdl_h1, k1);
}
theta_h0 <- theta[1:length(mdl_h0[["theta"]])]
theta_h1 <- theta[(length(mdl_h0[["theta"]])+1):length(theta)]
if ((k0==1) & (p==0)){
# Nmdl under null & HMmdl under alternative hypothesis
logL0 = logLike_Nmdl(theta_h0, mdl_h0);
logL1 = logLike_HMmdl(theta_h1, mdl_h1, k1);
}else if ((k0>1) & (p==0)){
# HMmdl under null & alternative hypothesis
logL0 = logLike_HMmdl(theta_h0, mdl_h0, k0);
logL1 = logLike_HMmdl(theta_h1, mdl_h1, k1);
}else if ((k0==1) & (q==1) & (p>0)){
# ARmdl under null & MSARmdl under alternative hypothesis
logL0 = logLike_ARmdl(theta_h0, mdl_h0);
logL1 = logLike_MSARmdl(theta_h1, mdl_h1, k1);
}else if ((k0>1) & (q==1) & (p>0)){
# MSARmdl under null & alternative hypothesis
logL0 = logLike_MSARmdl(theta_h0, mdl_h0, k0);
logL1 = logLike_MSARmdl(theta_h1, mdl_h1, k1);
}else if ((k0==1) & (q>1) & (p>0)){
# VARmdl under null & MSVARmdl under alternative hypothesis
logL0 = logLike_VARmdl(theta_h0, mdl_h0);
logL1 = logLike_MSVARmdl(theta_h1, mdl_h1, k1);
}else if ((k0>1) & (q>1) & (p>0)){
# MSARmdl under null & alternative hypothesis
logL0 = logLike_MSVARmdl(theta_h0, mdl_h0, k0);
logL1 = logLike_MSVARmdl(theta_h1, mdl_h1, k1);
}
devtools::document()
mmc_control = list(N = 19,
burnin = 100,
converge_check = NULL,
mdl_h0_control <- list(const  = TRUE,
getSE  = TRUE),
mdl_h1_control <- list(msmu   = TRUE,
msvar  = FALSE,
getSE  = TRUE,
method = "EM",
maxit  = 500,
use_diff_init = 1))
st <- Sys.time()
mdl <- MMCLRTest(y84, p = 4 , k0 = 1 , k1 = 2, mmc_control)
mmc_control = list(N = 19,
burnin = 100,
converge_check = NULL,
eps = 0.000000001,
CI_union = TRUE,
silence = FALSE,
threshold_stop = 0.05 + 1e-10,
mdl_h0_control <- list(const  = TRUE,
getSE  = TRUE),
mdl_h1_control <- list(msmu   = TRUE,
msvar  = FALSE,
getSE  = TRUE,
method = "EM",
maxit  = 500,
use_diff_init = 1))
st <- Sys.time()
mdl <- MMCLRTest(y84, p = 4 , k0 = 1 , k1 = 2, mmc_control)
end <- Sys.time() - st
mdl
end
mmc_control = list(N = 99,
burnin = 100,
converge_check = NULL,
eps = 0.000000001,
CI_union = TRUE,
silence = FALSE,
threshold_stop = 1,
mdl_h0_control <- list(const  = TRUE,
getSE  = TRUE),
mdl_h1_control <- list(msmu   = TRUE,
msvar  = FALSE,
getSE  = TRUE,
method = "EM",
maxit  = 500,
use_diff_init = 1))
st <- Sys.time()
mdl <- MMCLRTest(y84, p = 4 , k0 = 1 , k1 = 2, mmc_control)
