// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sumfinite
arma::vec sumfinite(arma::mat x, int ncol);
RcppExport SEXP _MSTest_sumfinite(SEXP xSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(sumfinite(x, ncol));
    return rcpp_result_gen;
END_RCPP
}
// finitemat
arma::mat finitemat(arma::mat x);
RcppExport SEXP _MSTest_finitemat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(finitemat(x));
    return rcpp_result_gen;
END_RCPP
}
// musigGrid_cpp
List musigGrid_cpp(arma::vec mu, arma::vec sig, int k, int ar);
RcppExport SEXP _MSTest_musigGrid_cpp(SEXP muSEXP, SEXP sigSEXP, SEXP kSEXP, SEXP arSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    rcpp_result_gen = Rcpp::wrap(musigGrid_cpp(mu, sig, k, ar));
    return rcpp_result_gen;
END_RCPP
}
// limP
arma::vec limP(arma::mat P, int k);
RcppExport SEXP _MSTest_limP(SEXP PSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(limP(P, k));
    return rcpp_result_gen;
END_RCPP
}
// paramList
List paramList(arma::vec theta, int ar, int k, bool msmu, bool msvar);
RcppExport SEXP _MSTest_paramList(SEXP thetaSEXP, SEXP arSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    rcpp_result_gen = Rcpp::wrap(paramList(theta, ar, k, msmu, msvar));
    return rcpp_result_gen;
END_RCPP
}
// VARparamList
List VARparamList(arma::vec theta, int N, int ar, int k, bool msmu, bool msvar);
RcppExport SEXP _MSTest_VARparamList(SEXP thetaSEXP, SEXP NSEXP, SEXP arSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    rcpp_result_gen = Rcpp::wrap(VARparamList(theta, N, ar, k, msmu, msvar));
    return rcpp_result_gen;
END_RCPP
}
// calcMSResid
arma::mat calcMSResid(List mdl, arma::mat mu, int k);
RcppExport SEXP _MSTest_calcMSResid(SEXP mdlSEXP, SEXP muSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMSResid(mdl, mu, k));
    return rcpp_result_gen;
END_RCPP
}
// calcMSVARResid
List calcMSVARResid(List mdl, List mu, int k);
RcppExport SEXP _MSTest_calcMSVARResid(SEXP mdlSEXP, SEXP muSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMSVARResid(mdl, mu, k));
    return rcpp_result_gen;
END_RCPP
}
// ts_lagged
List ts_lagged(arma::mat Y, int ar);
RcppExport SEXP _MSTest_ts_lagged(SEXP YSEXP, SEXP arSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    rcpp_result_gen = Rcpp::wrap(ts_lagged(Y, ar));
    return rcpp_result_gen;
END_RCPP
}
// randTransMat
arma::mat randTransMat(int k, int n);
RcppExport SEXP _MSTest_randTransMat(SEXP kSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(randTransMat(k, n));
    return rcpp_result_gen;
END_RCPP
}
// initVals
arma::vec initVals(arma::vec theta, int k, bool msmu, bool msvar);
RcppExport SEXP _MSTest_initVals(SEXP thetaSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    rcpp_result_gen = Rcpp::wrap(initVals(theta, k, msmu, msvar));
    return rcpp_result_gen;
END_RCPP
}
// initValsVAR
arma::vec initValsVAR(arma::vec mu, arma::mat sigma, int k, bool msmu, bool msvar);
RcppExport SEXP _MSTest_initValsVAR(SEXP muSEXP, SEXP sigmaSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    rcpp_result_gen = Rcpp::wrap(initValsVAR(mu, sigma, k, msmu, msvar));
    return rcpp_result_gen;
END_RCPP
}
// initValsKM
List initValsKM(arma::vec Y, int k, bool msmu, bool msvar);
RcppExport SEXP _MSTest_initValsKM(SEXP YSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    rcpp_result_gen = Rcpp::wrap(initValsKM(Y, k, msmu, msvar));
    return rcpp_result_gen;
END_RCPP
}
// MCpval
double MCpval(double test_stat, arma::vec null_vec, Rcpp::String type);
RcppExport SEXP _MSTest_MCpval(SEXP test_statSEXP, SEXP null_vecSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type test_stat(test_statSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_vec(null_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(MCpval(test_stat, null_vec, type));
    return rcpp_result_gen;
END_RCPP
}
// simuAR
List simuAR(List mdl_h0, int burnin);
RcppExport SEXP _MSTest_simuAR(SEXP mdl_h0SEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(simuAR(mdl_h0, burnin));
    return rcpp_result_gen;
END_RCPP
}
// simuMSAR
List simuMSAR(List mdl_h0, Rcpp::String type, int burnin);
RcppExport SEXP _MSTest_simuMSAR(SEXP mdl_h0SEXP, SEXP typeSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(simuMSAR(mdl_h0, type, burnin));
    return rcpp_result_gen;
END_RCPP
}
// simuMS
List simuMS(List mdl_h0, Rcpp::String type, int burnin);
RcppExport SEXP _MSTest_simuMS(SEXP mdl_h0SEXP, SEXP typeSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(simuMS(mdl_h0, type, burnin));
    return rcpp_result_gen;
END_RCPP
}
// cov2corr
arma::mat cov2corr(arma::mat cov_mat);
RcppExport SEXP _MSTest_cov2corr(SEXP cov_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    rcpp_result_gen = Rcpp::wrap(cov2corr(cov_mat));
    return rcpp_result_gen;
END_RCPP
}
// simuVAR
List simuVAR(List mdl_h0, int burnin);
RcppExport SEXP _MSTest_simuVAR(SEXP mdl_h0SEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(simuVAR(mdl_h0, burnin));
    return rcpp_result_gen;
END_RCPP
}
// simuMSVAR
List simuMSVAR(List mdl_h0, Rcpp::String type, int burnin);
RcppExport SEXP _MSTest_simuMSVAR(SEXP mdl_h0SEXP, SEXP typeSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(simuMSVAR(mdl_h0, type, burnin));
    return rcpp_result_gen;
END_RCPP
}
// LR_samp_dist
arma::vec LR_samp_dist(List mdl_h0, int k1, bool msmu, bool msvar, int N, int maxit, double thtol, int burnin);
RcppExport SEXP _MSTest_LR_samp_dist(SEXP mdl_h0SEXP, SEXP k1SEXP, SEXP msmuSEXP, SEXP msvarSEXP, SEXP NSEXP, SEXP maxitSEXP, SEXP thtolSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thtol(thtolSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(LR_samp_dist(mdl_h0, k1, msmu, msvar, N, maxit, thtol, burnin));
    return rcpp_result_gen;
END_RCPP
}
// MMCLRpval_fun
double MMCLRpval_fun(arma::vec theta, List mdl_h0, List mdl_h1, bool msmu, bool msvar, int ar, int N, int maxit, double thtol, int burnin, bool stationary_ind, double lambda);
RcppExport SEXP _MSTest_MMCLRpval_fun(SEXP thetaSEXP, SEXP mdl_h0SEXP, SEXP mdl_h1SEXP, SEXP msmuSEXP, SEXP msvarSEXP, SEXP arSEXP, SEXP NSEXP, SEXP maxitSEXP, SEXP thtolSEXP, SEXP burninSEXP, SEXP stationary_indSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< List >::type mdl_h1(mdl_h1SEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thtol(thtolSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool >::type stationary_ind(stationary_indSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(MMCLRpval_fun(theta, mdl_h0, mdl_h1, msmu, msvar, ar, N, maxit, thtol, burnin, stationary_ind, lambda));
    return rcpp_result_gen;
END_RCPP
}
// MMCLRpval_fun_max
double MMCLRpval_fun_max(arma::vec theta, List mdl_h0, List mdl_h1, bool msmu, bool msvar, int ar, int N, int maxit, double thtol, int burnin, bool stationary_ind, double lambda);
RcppExport SEXP _MSTest_MMCLRpval_fun_max(SEXP thetaSEXP, SEXP mdl_h0SEXP, SEXP mdl_h1SEXP, SEXP msmuSEXP, SEXP msvarSEXP, SEXP arSEXP, SEXP NSEXP, SEXP maxitSEXP, SEXP thtolSEXP, SEXP burninSEXP, SEXP stationary_indSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< List >::type mdl_h1(mdl_h1SEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thtol(thtolSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool >::type stationary_ind(stationary_indSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(MMCLRpval_fun_max(theta, mdl_h0, mdl_h1, msmu, msvar, ar, N, maxit, thtol, burnin, stationary_ind, lambda));
    return rcpp_result_gen;
END_RCPP
}
// calc_DLmoments
arma::vec calc_DLmoments(arma::vec ehat);
RcppExport SEXP _MSTest_calc_DLmoments(SEXP ehatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ehat(ehatSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_DLmoments(ehat));
    return rcpp_result_gen;
END_RCPP
}
// calc_Qmoments
arma::vec calc_Qmoments(arma::vec eps, int k1);
RcppExport SEXP _MSTest_calc_Qmoments(SEXP epsSEXP, SEXP k1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Qmoments(eps, k1));
    return rcpp_result_gen;
END_RCPP
}
// sim_DLmoments
arma::mat sim_DLmoments(int Tsize, int N);
RcppExport SEXP _MSTest_sim_DLmoments(SEXP TsizeSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Tsize(TsizeSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_DLmoments(Tsize, N));
    return rcpp_result_gen;
END_RCPP
}
// sim_Qmoments
arma::mat sim_Qmoments(int Tsize, int N, List mdl_h0, int k1);
RcppExport SEXP _MSTest_sim_Qmoments(SEXP TsizeSEXP, SEXP NSEXP, SEXP mdl_h0SEXP, SEXP k1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Tsize(TsizeSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    rcpp_result_gen = Rcpp::wrap(sim_Qmoments(Tsize, N, mdl_h0, k1));
    return rcpp_result_gen;
END_RCPP
}
// combine_stat
arma::vec combine_stat(arma::vec s0, arma::mat sN, arma::mat params, std::string type);
RcppExport SEXP _MSTest_combine_stat(SEXP s0SEXP, SEXP sNSEXP, SEXP paramsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sN(sNSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(combine_stat(s0, sN, params, type));
    return rcpp_result_gen;
END_RCPP
}
// calc_DLmcstat
arma::vec calc_DLmcstat(arma::vec ezt, int N, arma::mat params, Rcpp::String type);
RcppExport SEXP _MSTest_calc_DLmcstat(SEXP eztSEXP, SEXP NSEXP, SEXP paramsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ezt(eztSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_DLmcstat(ezt, N, params, type));
    return rcpp_result_gen;
END_RCPP
}
// calc_Qmcstat
arma::vec calc_Qmcstat(arma::vec ezt, int N, arma::mat params, List mdl_h0, int k1, Rcpp::String type);
RcppExport SEXP _MSTest_calc_Qmcstat(SEXP eztSEXP, SEXP NSEXP, SEXP paramsSEXP, SEXP mdl_h0SEXP, SEXP k1SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ezt(eztSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< List >::type mdl_h0(mdl_h0SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Qmcstat(ezt, N, params, mdl_h0, k1, type));
    return rcpp_result_gen;
END_RCPP
}
// approx_dist_loop
arma::mat approx_dist_loop(arma::mat SN2);
RcppExport SEXP _MSTest_approx_dist_loop(SEXP SN2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type SN2(SN2SEXP);
    rcpp_result_gen = Rcpp::wrap(approx_dist_loop(SN2));
    return rcpp_result_gen;
END_RCPP
}
// QMCtest
List QMCtest(arma::vec Y, int ar, int k0, int k1, int N, int simdist_N, bool msmu, bool msvar, int maxit, double thtol);
RcppExport SEXP _MSTest_QMCtest(SEXP YSEXP, SEXP arSEXP, SEXP k0SEXP, SEXP k1SEXP, SEXP NSEXP, SEXP simdist_NSEXP, SEXP msmuSEXP, SEXP msvarSEXP, SEXP maxitSEXP, SEXP thtolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type simdist_N(simdist_NSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thtol(thtolSEXP);
    rcpp_result_gen = Rcpp::wrap(QMCtest(Y, ar, k0, k1, N, simdist_N, msmu, msvar, maxit, thtol));
    return rcpp_result_gen;
END_RCPP
}
// DLMMCpval_fun
double DLMMCpval_fun(arma::vec theta, arma::vec y, arma::mat x, int N, int simdist_N, Rcpp::String pval_type, bool stationary_ind, double lambda);
RcppExport SEXP _MSTest_DLMMCpval_fun(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP NSEXP, SEXP simdist_NSEXP, SEXP pval_typeSEXP, SEXP stationary_indSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type simdist_N(simdist_NSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type pval_type(pval_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type stationary_ind(stationary_indSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(DLMMCpval_fun(theta, y, x, N, simdist_N, pval_type, stationary_ind, lambda));
    return rcpp_result_gen;
END_RCPP
}
// DLMMCpval_fun_max
double DLMMCpval_fun_max(arma::vec theta, arma::vec y, arma::mat x, int N, int simdist_N, Rcpp::String pval_type, bool stationary_ind, double lambda);
RcppExport SEXP _MSTest_DLMMCpval_fun_max(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP NSEXP, SEXP simdist_NSEXP, SEXP pval_typeSEXP, SEXP stationary_indSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type simdist_N(simdist_NSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type pval_type(pval_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type stationary_ind(stationary_indSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(DLMMCpval_fun_max(theta, y, x, N, simdist_N, pval_type, stationary_ind, lambda));
    return rcpp_result_gen;
END_RCPP
}
// loglik_fun
double loglik_fun(arma::vec theta, List mdl);
RcppExport SEXP _MSTest_loglik_fun(SEXP thetaSEXP, SEXP mdlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_fun(theta, mdl));
    return rcpp_result_gen;
END_RCPP
}
// ARmdl
List ARmdl(arma::vec Y, int ar, bool intercept, bool getSE);
RcppExport SEXP _MSTest_ARmdl(SEXP YSEXP, SEXP arSEXP, SEXP interceptSEXP, SEXP getSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type getSE(getSESEXP);
    rcpp_result_gen = Rcpp::wrap(ARmdl(Y, ar, intercept, getSE));
    return rcpp_result_gen;
END_RCPP
}
// VARmdl
List VARmdl(arma::mat Y, int ar, bool intercept);
RcppExport SEXP _MSTest_VARmdl(SEXP YSEXP, SEXP arSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(VARmdl(Y, ar, intercept));
    return rcpp_result_gen;
END_RCPP
}
// MSloglik_fun
double MSloglik_fun(arma::vec theta, List mdl, int k);
RcppExport SEXP _MSTest_MSloglik_fun(SEXP thetaSEXP, SEXP mdlSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MSloglik_fun(theta, mdl, k));
    return rcpp_result_gen;
END_RCPP
}
// MSloglik_fun_min
double MSloglik_fun_min(arma::vec theta, List mdl, int k);
RcppExport SEXP _MSTest_MSloglik_fun_min(SEXP thetaSEXP, SEXP mdlSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MSloglik_fun_min(theta, mdl, k));
    return rcpp_result_gen;
END_RCPP
}
// MSloglik_const_eq
arma::vec MSloglik_const_eq(arma::vec theta, List mdl, int k);
RcppExport SEXP _MSTest_MSloglik_const_eq(SEXP thetaSEXP, SEXP mdlSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MSloglik_const_eq(theta, mdl, k));
    return rcpp_result_gen;
END_RCPP
}
// MSloglik_const_ineq
double MSloglik_const_ineq(arma::vec theta, List mdl, int k);
RcppExport SEXP _MSTest_MSloglik_const_ineq(SEXP thetaSEXP, SEXP mdlSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MSloglik_const_ineq(theta, mdl, k));
    return rcpp_result_gen;
END_RCPP
}
// MSloglik
List MSloglik(arma::vec theta, List mdl, int k);
RcppExport SEXP _MSTest_MSloglik(SEXP thetaSEXP, SEXP mdlSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MSloglik(theta, mdl, k));
    return rcpp_result_gen;
END_RCPP
}
// EMaximization
List EMaximization(arma::vec theta, List mdl, List MSloglik_output, int k);
RcppExport SEXP _MSTest_EMaximization(SEXP thetaSEXP, SEXP mdlSEXP, SEXP MSloglik_outputSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< List >::type MSloglik_output(MSloglik_outputSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(EMaximization(theta, mdl, MSloglik_output, k));
    return rcpp_result_gen;
END_RCPP
}
// MSVARloglik
List MSVARloglik(arma::vec theta, List mdl, int k);
RcppExport SEXP _MSTest_MSVARloglik(SEXP thetaSEXP, SEXP mdlSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(MSVARloglik(theta, mdl, k));
    return rcpp_result_gen;
END_RCPP
}
// VAREMaximization
List VAREMaximization(arma::vec theta, List mdl, List MSloglik_output, int k);
RcppExport SEXP _MSTest_VAREMaximization(SEXP thetaSEXP, SEXP mdlSEXP, SEXP MSloglik_outputSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< List >::type MSloglik_output(MSloglik_outputSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(VAREMaximization(theta, mdl, MSloglik_output, k));
    return rcpp_result_gen;
END_RCPP
}
// EMiter
List EMiter(List mdl, List EMest_output, int k);
RcppExport SEXP _MSTest_EMiter(SEXP mdlSEXP, SEXP EMest_outputSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< List >::type EMest_output(EMest_outputSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(EMiter(mdl, EMest_output, k));
    return rcpp_result_gen;
END_RCPP
}
// EMiter_VAR
List EMiter_VAR(List mdl, List EMest_output, int k);
RcppExport SEXP _MSTest_EMiter_VAR(SEXP mdlSEXP, SEXP EMest_outputSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< List >::type EMest_output(EMest_outputSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(EMiter_VAR(mdl, EMest_output, k));
    return rcpp_result_gen;
END_RCPP
}
// EMest
List EMest(arma::vec theta_0, List mdl, int k, List optim_options);
RcppExport SEXP _MSTest_EMest(SEXP theta_0SEXP, SEXP mdlSEXP, SEXP kSEXP, SEXP optim_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< List >::type optim_options(optim_optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(EMest(theta_0, mdl, k, optim_options));
    return rcpp_result_gen;
END_RCPP
}
// EMest_VAR
List EMest_VAR(arma::vec theta_0, List mdl, int k, List optim_options);
RcppExport SEXP _MSTest_EMest_VAR(SEXP theta_0SEXP, SEXP mdlSEXP, SEXP kSEXP, SEXP optim_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< List >::type mdl(mdlSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< List >::type optim_options(optim_optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(EMest_VAR(theta_0, mdl, k, optim_options));
    return rcpp_result_gen;
END_RCPP
}
// MSARmdl
List MSARmdl(arma::vec Y, int ar, int k, bool msmu, bool msvar, int maxit, double thtol, bool getHess, int max_init);
RcppExport SEXP _MSTest_MSARmdl(SEXP YSEXP, SEXP arSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP, SEXP maxitSEXP, SEXP thtolSEXP, SEXP getHessSEXP, SEXP max_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thtol(thtolSEXP);
    Rcpp::traits::input_parameter< bool >::type getHess(getHessSEXP);
    Rcpp::traits::input_parameter< int >::type max_init(max_initSEXP);
    rcpp_result_gen = Rcpp::wrap(MSARmdl(Y, ar, k, msmu, msvar, maxit, thtol, getHess, max_init));
    return rcpp_result_gen;
END_RCPP
}
// MSVARmdl
List MSVARmdl(arma::mat Y, int ar, int k, bool msmu, bool msvar, int maxit, double thtol, bool getHess, int max_init);
RcppExport SEXP _MSTest_MSVARmdl(SEXP YSEXP, SEXP arSEXP, SEXP kSEXP, SEXP msmuSEXP, SEXP msvarSEXP, SEXP maxitSEXP, SEXP thtolSEXP, SEXP getHessSEXP, SEXP max_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ar(arSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type msmu(msmuSEXP);
    Rcpp::traits::input_parameter< bool >::type msvar(msvarSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thtol(thtolSEXP);
    Rcpp::traits::input_parameter< bool >::type getHess(getHessSEXP);
    Rcpp::traits::input_parameter< int >::type max_init(max_initSEXP);
    rcpp_result_gen = Rcpp::wrap(MSVARmdl(Y, ar, k, msmu, msvar, maxit, thtol, getHess, max_init));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MSTest_sumfinite", (DL_FUNC) &_MSTest_sumfinite, 2},
    {"_MSTest_finitemat", (DL_FUNC) &_MSTest_finitemat, 1},
    {"_MSTest_musigGrid_cpp", (DL_FUNC) &_MSTest_musigGrid_cpp, 4},
    {"_MSTest_limP", (DL_FUNC) &_MSTest_limP, 2},
    {"_MSTest_paramList", (DL_FUNC) &_MSTest_paramList, 5},
    {"_MSTest_VARparamList", (DL_FUNC) &_MSTest_VARparamList, 6},
    {"_MSTest_calcMSResid", (DL_FUNC) &_MSTest_calcMSResid, 3},
    {"_MSTest_calcMSVARResid", (DL_FUNC) &_MSTest_calcMSVARResid, 3},
    {"_MSTest_ts_lagged", (DL_FUNC) &_MSTest_ts_lagged, 2},
    {"_MSTest_randTransMat", (DL_FUNC) &_MSTest_randTransMat, 2},
    {"_MSTest_initVals", (DL_FUNC) &_MSTest_initVals, 4},
    {"_MSTest_initValsVAR", (DL_FUNC) &_MSTest_initValsVAR, 5},
    {"_MSTest_initValsKM", (DL_FUNC) &_MSTest_initValsKM, 4},
    {"_MSTest_MCpval", (DL_FUNC) &_MSTest_MCpval, 3},
    {"_MSTest_simuAR", (DL_FUNC) &_MSTest_simuAR, 2},
    {"_MSTest_simuMSAR", (DL_FUNC) &_MSTest_simuMSAR, 3},
    {"_MSTest_simuMS", (DL_FUNC) &_MSTest_simuMS, 3},
    {"_MSTest_cov2corr", (DL_FUNC) &_MSTest_cov2corr, 1},
    {"_MSTest_simuVAR", (DL_FUNC) &_MSTest_simuVAR, 2},
    {"_MSTest_simuMSVAR", (DL_FUNC) &_MSTest_simuMSVAR, 3},
    {"_MSTest_LR_samp_dist", (DL_FUNC) &_MSTest_LR_samp_dist, 8},
    {"_MSTest_MMCLRpval_fun", (DL_FUNC) &_MSTest_MMCLRpval_fun, 12},
    {"_MSTest_MMCLRpval_fun_max", (DL_FUNC) &_MSTest_MMCLRpval_fun_max, 12},
    {"_MSTest_calc_DLmoments", (DL_FUNC) &_MSTest_calc_DLmoments, 1},
    {"_MSTest_calc_Qmoments", (DL_FUNC) &_MSTest_calc_Qmoments, 2},
    {"_MSTest_sim_DLmoments", (DL_FUNC) &_MSTest_sim_DLmoments, 2},
    {"_MSTest_sim_Qmoments", (DL_FUNC) &_MSTest_sim_Qmoments, 4},
    {"_MSTest_combine_stat", (DL_FUNC) &_MSTest_combine_stat, 4},
    {"_MSTest_calc_DLmcstat", (DL_FUNC) &_MSTest_calc_DLmcstat, 4},
    {"_MSTest_calc_Qmcstat", (DL_FUNC) &_MSTest_calc_Qmcstat, 6},
    {"_MSTest_approx_dist_loop", (DL_FUNC) &_MSTest_approx_dist_loop, 1},
    {"_MSTest_QMCtest", (DL_FUNC) &_MSTest_QMCtest, 10},
    {"_MSTest_DLMMCpval_fun", (DL_FUNC) &_MSTest_DLMMCpval_fun, 8},
    {"_MSTest_DLMMCpval_fun_max", (DL_FUNC) &_MSTest_DLMMCpval_fun_max, 8},
    {"_MSTest_loglik_fun", (DL_FUNC) &_MSTest_loglik_fun, 2},
    {"_MSTest_ARmdl", (DL_FUNC) &_MSTest_ARmdl, 4},
    {"_MSTest_VARmdl", (DL_FUNC) &_MSTest_VARmdl, 3},
    {"_MSTest_MSloglik_fun", (DL_FUNC) &_MSTest_MSloglik_fun, 3},
    {"_MSTest_MSloglik_fun_min", (DL_FUNC) &_MSTest_MSloglik_fun_min, 3},
    {"_MSTest_MSloglik_const_eq", (DL_FUNC) &_MSTest_MSloglik_const_eq, 3},
    {"_MSTest_MSloglik_const_ineq", (DL_FUNC) &_MSTest_MSloglik_const_ineq, 3},
    {"_MSTest_MSloglik", (DL_FUNC) &_MSTest_MSloglik, 3},
    {"_MSTest_EMaximization", (DL_FUNC) &_MSTest_EMaximization, 4},
    {"_MSTest_MSVARloglik", (DL_FUNC) &_MSTest_MSVARloglik, 3},
    {"_MSTest_VAREMaximization", (DL_FUNC) &_MSTest_VAREMaximization, 4},
    {"_MSTest_EMiter", (DL_FUNC) &_MSTest_EMiter, 3},
    {"_MSTest_EMiter_VAR", (DL_FUNC) &_MSTest_EMiter_VAR, 3},
    {"_MSTest_EMest", (DL_FUNC) &_MSTest_EMest, 4},
    {"_MSTest_EMest_VAR", (DL_FUNC) &_MSTest_EMest_VAR, 4},
    {"_MSTest_MSARmdl", (DL_FUNC) &_MSTest_MSARmdl, 9},
    {"_MSTest_MSVARmdl", (DL_FUNC) &_MSTest_MSVARmdl, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MSTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
